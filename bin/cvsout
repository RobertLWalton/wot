#!/bin/sh
#
# Create new project directory.
#
# File:		cvsout
# Author:	Bob Walton <walton@deas.harvard.edu>
# Date:		Sun Apr  5 08:25:38 EDT 2009
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2009/04/05 14:55:05 $
#   $RCSfile: cvsout,v $
#   $Revision: 1.12 $

# Redirect all error output to the standard output.
#
exec 2>&1

n=no
e=no
r=
case "$1" in

-doc*)

    echo '
cvsout [-n|-e|-ne|-en|-rT] [-E] repository directory

    Checkout a project directory from a repository, in
    the case that the local copy of this directory
    will NOT itself be inside a local directory that
    has been checked out.

    The repository argument is of the form

    	AAA@HHH:DDD

    where AAA is an account name, HHH is the name of the
    host on which the account resides, and DDD is the
    ABSOLUTE pathname of the root directory holding the
    repository within the account AAA@HHH.

    If DDD is in the current account, `AAA@HHH:'"'"'
    should be omitted.
    
    Then `directory'"'"' is both the name of the subdir-
    ctory of DDD being checked out, relative to DDD, and
    ALSO the name of the local checked out copy direc-
    tory, relative to the current directory.  It can be
    the name of a project directory, e.g., PPP for
    project PPP, or the name of a project subdirectory,
    e.g., PPP/SSS for subdirectory SSS of project PPP.
    If the latter, both PPP and PPP/SSS are created
    locally and put under CVS control, but except for
    SSS none of the contents of the repository PPP
    directory are checked out.  If `directory'"'"' is
    PPP/SSS, then after checking it out, you can

    	mv PPP/SSS .
	rm -rf PPP

    to get rid of the superflous PPP directory.

    All the contents of a directory being checked out
    will be checked out, recursively.

    The -rT option, if given, the project revision that
    has tag T (see cvstag) is checked into the subdirec-
    tory ./TAG.rT.  If this is done, the checked out
    files should NOT be modified and then checked back
    in (i.e., cvscom should NOT be used on them).

    Normally `directory'"'"' must exist in the reposi-
    tory but must NOT exist locally, and it will be
    checked out, thus creating it locally.

    If the -e option is given, the directory must pre-
    exist locally, but it also must NOT contain any
    contents with the same names as contents being
    checked out.  The pre-existing contents of the
    existing directory are NOT entered into the reposi-
    tory: use cvsadd to do this.

    If the -n option is given the directory must not
    exist in the repository, and will be created there.
    In this case the repository directory will be empty
    and have no contents to check out.

    The -ne or -en options combine the action of -e and
    -n and can be used to make an existing directory
    into a repository directory.

    This command may not be used if the directory is
    within a directory under CVS control.  To add a new
    subdirectory of such a directory to the repository
    use mkdir and cvsadd instead; to check out a subdi-
    rectory of such a directory if the subdirectory is
    already in the repository, use cvsup.

    Normally project subdirectories that are empty (or
    that have only Attic files; see cvsrm) are not
    checked out.  The -E option causes such empty dir-
    ectories to be checked out.'

    exit 1
    ;;
-n)
    shift
    n=yes
    ;;
-e)
    shift
    e=yes
    ;;
-ne|-en)
    shift
    n=yes
    e=yes
    ;;
-r*)
    r="$1"
    shift
esac

E=no
case "$1" in
-E)	E=yes
	shift
	;;
esac

if [ $# -ne 2 ]
then
    echo "ERROR: too few or too many arguments"
    exit 2
fi

repository="$1"
directory="$2"

case "$repository" in
*:*)
    remote=yes
    account="`expr "$repository" : '\([^:]*\):'`"
    root="`expr "$repository" : '[^:]*:\(.*\)$'`"
    case "$account" in
    *?@?*)	aok=yes;;
    *)	echo "ERROR: bad account format: $account"
        exit 2;;
    esac
    case "$root" in
    /?*)	aok=yes;;
    *)	echo "ERROR: non-absolute root directory:" \
             "$root"
        exit 2;;
    esac
    ;;
/?*)
    remote=no
    ;;
*)
    echo "ERROR: non-absolute root directory:" \
         "$repository"
    exit 2
    ;;
esac

if [ "$r" != "" ]
then
    tag="`expr "$r" : '-r\(.*\)$'`"
    case "$tag" in
    "")
    	echo "ERROR: empty tag in $r"
	exit 2
	;;
    [0-9]*)
    	echo "ERROR: tag begins with digit in $r"
	exit 2
	;;
    esac

    tagdir="TAG.r$tag"
    echo "# Moving to subdirectory $tagdir"
    echo mkdir -p "$tagdir"
    mkdir -p "$tagdir"
    echo cd "$tagdir"
    if ! cd "$tagdir"
    then
        echo "ERROR: cd $tagdir failed"
    fi
elif [ $e = no -a -e "$directory" ]
then
    echo "ERROR: local directory exists but no -e" \
         "option given: $directory"
    exit 2
elif [ $e = yes -a ! -d "$directory" ]
then
    echo "ERROR: local directory does not exist" \
         "but -e option given: $directory"
    exit 2
elif [ -d "`dirname "$directory"`/CVS" ]
then
    echo "ERROR: $directory is inside a local" \
         "directory that is under CVS control"
    if [ $n = yes ]
    then
	echo "       maybe you should use mkdir and" \
	     "then cvsadd instead"
    else
	echo "       maybe you should use cvsup instead"
    fi
    exit 2
fi

if [ $n = yes ]
then
    echo "# Making $directory in repository"
    if [ $remote = no ]
    then
    	echo mkdir "$repository/$directory"
    	if ! mkdir "$repository/$directory"
	then
	    echo "ERROR during mkdir"
	    exit 2
	fi
    else
    	echo ssh "$account" mkdir "$root/$directory"
    	if ! ssh "$account" mkdir "$root/$directory"
	then
	    echo "ERROR during mkdir"
	    exit 2
	fi
    fi
fi

echo "# Checking $directory out of repository"
echo cvs -d "$repository" checkout $r "$directory"
if cvs -d "$repository" checkout $r "$directory" \
    && [ -d "$directory" ]
then
    if [ $E = no ]
    then
	echo "# Removing empty subdirectories"
	echo "(cd $directory; cvs update -P)"
	(cd "$directory"; cvs update -P)
    fi
    if [ "$r" != "" ]
    then
        echo "# Checkout is in $tagdir/$directory"
    fi
else
    echo "# Checkout failed to produce $directory"
    if [ "$r" != "" ]
    then
        echo "# Tag $tag not used in $directory"
    fi
fi
