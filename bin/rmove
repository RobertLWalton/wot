#!/bin/sh
#
# File:		rmove
# Author:	walton@acm.org
# Date:		Tue Jun 14 05:41:31 EDT 2016

case "$1" in
-doc* | "" )
	echo "
rmove file ... directory

    Moves the files to the directory, like mv(1), except
    that the file names must be remote in the format of
    scp(1).  The files are copied and then deleted.  The
    file names may have scp(1) widecards, e.g., as in
    A@H:D/F'*'.  The directory must be local.

    scp is used to do the copying, and ssh(1) is used
    to delete the files after copying, and also to do
    an MD5 sum check after copying and before deleting."
    exit 0
    ;;
esac

declare -a files moved not_moved

# find_md5sum F returns md5sum of F even if F is remote.
# If error, returns error message and status 1;  if no
# error returns MD5 sum and status 0.
#
function find_md5sum {
    local A F command out md5sum
    if [[ "$1" =~ ^([^:]*):(.*)$ ]]
    then
        A="${BASH_REMATCH[1]}"
        F="${BASH_REMATCH[2]}"
	command="ssh '$A' md5sum '$F'"
    else
	command="md5sum '$1'"
    fi
    out=`eval $command`
    if [ $? -ne 0 ]
    then
        echo "ERROR: executing $command"
	return 1
    fi

    if [[ "$out" =~ ^([0-9a-fA-F]*)\ \ *([^ ]*)$ ]]
    then
	md5sum="${BASH_REMATCH[1]}"
	if [[ "$md5sum" =~ \
	      ^................................$ ]]
	then
	    echo $md5sum
	    return 0
	fi
    fi
    echo "ERROR: bad output from $command"
    echo "       $out"
    return 1
}

last="$1"
shift
while [ "$1" ]
do
    if [[ "$last" =~ ^([^:]*):(.*)$ ]]
    then
        A="${BASH_REMATCH[1]}"
        F="${BASH_REMATCH[2]}"
	found=0
	for f in ` ssh "$A" ls -d "$F" `
	do
	    found=1
	    if ssh "$A" test \! -f "$F"
	    then
		echo "ERROR: not a file: $A:$f"
		echo "IGNORING $A:$f"
		not_moved+=("$A:$f")
	    else
		files+=("$A:$f")
	    fi
	done
	if [ $found -eq 0 ]
	then
	    echo "ERROR: executing ssh $A ls -d $F"
	    echo "IGNORING $last"
	    not_moved+=("$last")
	fi
    else
    	files+=("$last")
    fi
    last="$1"
    shift
done

directory="$last"
if [[ "$directory" =~ : ]]
then
    echo "ERROR: directory name is not local:" \
         "$directory"
    exit 1
elif [ ! -d "$directory" ]
then
    echo "ERROR: not a directory: $directory"
    exit 1
fi

for f in ${files[@]}
do
    if [[ "$f" =~ ^([^:]*):(.*)$ ]]
    then
        A="${BASH_REMATCH[1]}"
        F="${BASH_REMATCH[2]}"
	G="$F"
	if [[ "$F" =~ ^(.*)/([^/]*)$ ]]
	then
	    G=${BASH_REMATCH[2]}
	fi

	# The following may never be used
	# as ls changes A: to A:.
	#
	if [ -z "$G" ]
	then
	    echo "ERROR: bad name $f"
	    echo "IGNORING $f"
	    not_moved+=("$f")
	    continue
	fi
	md5src=`find_md5sum "$f"`
	if [ $? -ne 0 ]
	then
	    echo "$md5src"
	    echo "IGNORING $f"
	    not_moved+=("$f")
	    continue
	fi
	if [ -e "$directory/$G" ]
	then
	    rm -f "$directory/$G"
	    if [ $? -ne 0 ]
	    then
		echo "ERROR: executing" \
		     "rm -f $directory/$G"
		echo "IGNORING $f"
		not_moved+=("$f")
		continue
	    fi
	fi
	scp -p "$f" "$directory"
	if [ $? -ne 0 ]
	then
	    echo "ERROR: executing" \
		 "scp -f $f $directory"
	    echo "IGNORING $f"
	    not_moved+=("$f")
	    continue
	fi
	md5des=`find_md5sum "$directory/$G"`
	if [ $? -ne 0 ]
	then
	    echo "$md5des"
	    echo "REMOVING $directory/$G"
	    rm -f "$directory/$G"
	    echo "IGNORING $f"
	    not_moved+=("$f")
	    continue
	fi
	if [ "$md5src" != "$md5des" ]
	then
	    echo "ERROR: MD5 sum of copy does not" \
	                "match that of source:"
	    echo "       $md5src $f"
	    echo "       $md5des $directory/$G"
	    echo "REMOVING $directory/$G"
	    rm -f "$directory/$G"
	    echo "IGNORING $f"
	    not_moved+=("$f")
	    continue
	else
	    ssh "$A" rm -f "$F"
	    if [ $? -ne 0 ]
	    then
		echo "ERROR: executing" \
		     "ssh $A rm -f $F"
		echo "BUT FILE WAS COPIED!"
	    fi
	    moved+=("$f")
	fi
    else
        echo "ERROR: file name is local: $f"
	echo "IGNORING $f"
	not_moved+=("$f")
	continue
    fi
done

echo ""
if [ ${#moved[@]} -ne 0 ]
then
    echo "MOVED:"
    for f in ${moved[@]}
    do
    	echo "  $f"
    done
fi
if [ ${#not_moved[@]} -ne 0 ]
then
    echo "NOT MOVED DUE TO ERRORS:"
    for f in ${not_moved[@]}
    do
    	echo "  $f"
    done
fi
