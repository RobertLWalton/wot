#!/bin/bash
#
# File:		gitexpunge
# Author:	Bob Walton <walton@acm.org>
# Date:		Mon Aug  8 23:53:52 EDT 2016
#
# The author(s) have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.

case $1 in -doc*|"")
    echo "
gitexpunge directory filename ...
    Clone the current git repository in the directory
    which must not previously exist, and then in that
    directory REMOVE all files and subdirectories that
    ARE NAMED from all commits, pruning empty commits.
    The commits are renamed.

    The filenames are relative to the workspace root
    directory and may contain metacharacters such as
    \`*'.
    
    Note this is the opposite of gitfilter which KEEPS
    the named files and subdirectories instead of
    REMOVING them."

    exit 1
    ;;
esac

askcontinue=0
if [ -n "`git branch -r | grep origin`" ]
then
    if [ "`git diff --name-only HEAD origin/master`" ]
    then
	echo "HEAD and origin/master differ"
	askcontinue=1
    fi
fi
stat=`git status --porcelain -uno`
if [ -n "$stat" ]
then
    echo "commit not up-to-date"
    echo $stat
    askcontinue=1
fi
if [ $askcontinue -eq 1 ]
then
    echo 'DO YOU WANT TO CONTINUE (y or n)?'
    read
    if [ "$REPLY" != "y" ]
    then
	echo 'ABORTED!'
	exit 0
    fi
fi

directory="$1"
shift

if [ -e "$directory" ]
then
    echo "ERROR: $directory already exists"
    exit 1
fi

dir=.
while [ ! -e $dir/.git ]
do
    if [ ! -e $dir ]
    then
        echo "ERROR: current directory has no .git" \
	     "containing ancestor"
	exit 1
    fi
    dir=$dir/..
done

if git clone -q --no-hardlinks $dir/.git "$directory"
then
    echo "Cloned $dir/.git to $directory"
else
    echo "FAILED: git clone -q --no-hardlinks" \
         "$dir/.git $directory"
    exit 1
fi

olddir=`pwd`
if cd "$directory"
then
    echo "Filtering will be done in $directory"
else
    echo "FAILED: cd $directory"
    exit 1
fi

# Cautious double check.
newdir=`pwd`
if [ "$olddir" = "$newdir" ]
then
    echo "SYSTEM ERROR: cd $directory did not report" \
         "error"
    exit 1
fi

if git filter-branch --prune-empty \
                     --tree-filter "rm -rf $*" HEAD
then
    echo "Cloned repository in $directory has been" \
         "filtered"
    echo "  Contents: `find . -maxdepth 1 \
                  \( -name . -o -name .git \
                             -o -printf '%f\0' \) \
	    | xargs -0 echo `"
else
    echo "FAILED: git filter-branch --prune-empty" \
                     "--tree-filter 'rm -rf $*' HEAD"
    exit 1
fi
