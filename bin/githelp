#!/bin/sh
#
# File:		githelp
# Author:	Bob Walton <walton@acm.org>
# Date:		Thu Apr 12 08:11:49 EDT 2012
#
# The author(s) have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.

case "$1" in
-doc*)
	echo "
githelp [NAME]
    Print documentation for all git... commands with no
    argument, or for gitNAME if NAME is given."
    exit 1
    ;;
"")
    ;;
*)
    git$1 -doc | less -F
    exit 0
    ;;
esac

    echo "
Overview
--------

A git repository is a parent directory and its descend-
ants in the directory tree.  The repository proper is in
the ./.git subdirectory of the parent directory.  The
files in the parent directory and its descendants are
called the working files.  The repository holds commits,
which are snapshots of all the working files and their
containing directories taken together.  Commits cannot
be changed.

The repository also holds an \`index', which contains
instructions to change, add, remove, or rename files
when making a new commit from the last commit.  The
index can be changed.  The index also holds versions of
files, but we view this as just a convenience for compu-
ting the differences between sets of changes to a file
when none of the changes have been committed.

A file is said to be \`committable' if it is mentioned
in the index or is in the last commit.  The \`commit'
operation makes a new commit that includes all commit-
table files except those which the index instructions
remove or rename.  The commit operation uses the index
instructions to make the new commit from the last
commit and the working files, and then clears the index.

At any time the \`current repository' is the repository
containing the current directory, which may be a
descendant of the parent directory of the repository.

A git repository can have a remote copy called the
\`remote origin' of the repository.  This copy is
generally \`bare', meaning it has just an equivalent
of the .git directory and has no working files.  The
last commit of the current repository can be pushed to
the remote origin, and the last commit pushed to the
remote origin can be pulled to the current repository.
Thus if several repositories on different machines share
the same remote origin, a new commit can be made in one
of these repositories, pushed to the remote origin, and
pulled to the other repositories.

There can be a conflict if two different commits are
made in different repositories with the same remote
origin.  The first commit to be pushed will succeed.
The second will fail, and the conflict will have to
be resolved by whoever did the second push.

Note that for each file version git saves the contents
of the file and the user executable bit of the file
mode, but does not save any other file mode bit.  Two
versions of the file with the same content still differ
if one has the user executable bit on and the other does
not.  Upon being retrieved from a commit, the file mode
will be 666 or 777 according to the saved executable
bit, and this will be modified by the umask setting
(typically to 640 or 750).

Also, each repository has a \`user' whose name and email
address are associated with commits made using the
repository.  In addition, commits can be given symbolic
names called \`tags'.

Commits have names of the form {...}.  A name of the
form {n} where n is a natural number names the n'th
commit before the most recent, so {0} is the most recent
commit, {1} the previous commit, etc.  Names such as
'{Apr 6 7:00}' and '{two days ago}' can also be used
in most situations, but these must be in quotes when
used as arguments because they contain spaces.  If
you have imported a repository from CVS, you may want
to use alternative commit names of the form ~n: see
gitcvsimport.


Initialization
--------------
`gitinit -doc`
`gitbare -doc`
`gitclone -doc`
`gitconfig -doc`


Committing
----------
`gitstat -doc`
`gitcom -doc`
`gitpush -doc`
`gitpull -doc`


Indexing
--------
`gitdiff -doc`
`gitadd -doc`
`gitsub -doc`
`gitrm -doc`
`gitmv -doc`


Resolving Conflicts
--------- ---------

`gitconflict -doc`
`gitmerge -doc`


History and Tags
------- --- ----
`gitlog -doc`
`gitls -doc`
`gitold -doc`
`gittag -doc`
`gituntag -doc`


Importing
---------
`gitcvsimport -doc`" | less -F
