#!/bin/bash
#
# Manage system configuration files.
#
# File:		conf
# Author:	Bob Walton <walton@acm.org>
# Date:		Tue Mar  8 05:04:25 EST 2016
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.

# The undocumented -d option is used for debugging.
# WARNING: This option leaves the last tmp file
#          unremoved.

nop() {
    do_nothing=
}

cpall() {
    cp --preserve=all "$1" "$2"
}

cptime() {
    cp --preserve=timestamps "$1" "$2"
}

cpattr() {
    cp --attributes-only --preserve=all "$1" "$2"
}

verbose=nop
debug=nop
nodebug=
if [ "$1" = "-v" ]
then
    verbose=
    shift
elif [ "$1" = "-d" ]
then
    verbose=
    debug=
    nodebug=nop
    shift
fi
command="$1"
shift

case "$command" in
-doc*)
	echo '
conf [-v] COMMAND [FILE-PATTERN ...]

    Finds the differences between copies of system files
    in the source directories and copies in the target
    directory.  The -v option makes operation verbose.
    The COMMAND is one of:

      put	The source files are used to update the
                target files.  By default this is done
		by cp preserving timestamps (but not
		mode, owner, or context) after making
		target user writable.  But if target
		does not pre-exist, update is done by
		cp preserving timestamps, mode, owner,
		and context.

      get	The target files are used to update the
      		source files.  By default this is done
		by cp preserving timestamps, mode,
		owner, and context.  The source files
		must pre-exist this command.

      ptest     List the files that would be changed by
      		put.

      gtest     List the files that would be changed by
      		get.

      pdiff	Perform a diff on the current target
      		file and the file that would replace it
		if a put were done.  By default this is
		computed by `diff target source'"'"'.

      gdiff	Perform a diff on the current source
      		file and the file that would replace it
		if a get were done.  By default this is
		computed by `diff source target'"'"'.

    The source directories are a list of one or more
    directories.  If a file appears in several of these,
    only the first directory containing the file is
    considered, and it hides the subsequent directories
    for that file.  Conf never creates new files in the
    source directories: `get'"'"' always operates to
    update an existing file in a source directory.

    Only file whose names match a FILE-PATTERN argument
    are considered, unless there are no FILE-PATTERN
    arguments, in which case all files in the source
    directories are considered.  The FILE-PATTERNS
    can contain the special characters *?[], but these
    must be quoted in the command.  The file names
    matched to these are relative to the source
    directories.  The / character is NOT specially
    treated in a file name, so * can match across
    directory boundaries.

    Files inside RCS, CVS, ATTIC, or SETUP subdirec-
    tories are never considered.

    There may be more than one target directory and for
    each an associated list of source directories.  All
    will be considered.

    Conf begins by sourcing the ~/conf/confrc file,
    unless the CONFRC environment variable is defined,
    in which case the file named in that variable is
    sourced.  The sourced file should define the
    following global variables.

    Note that since arrays with string subscripts are
    not allowed in bash, these are fudged by using

    	XXX[YYY]

    in what follows as shorthand for

    	symbol YYY
	XXX[$?]

    In other words, to find the element of the array XXX
    that corresponds to a string index YYY, first call
    the `symbol'"'"' function, and then use its returned
    status as the index into XXX.

	HOST
	    The name of the current host computer, in a
	    form sufficient to distiguish it from other
	    computers being maintained by the same conf
	    files.  Usually the short hostname: example:

	    HOST=`hostname -s`

    	DIRECTORIES
	    This is a list each element of which is a :
	    separated list of directories.  For each
	    element the first directory listed is the
	    target directory and the remaining are the
	    source directories in the order they are
	    searched.  Example:

	    HOST=`hostname -s`
	    DIRECTORIES=/:$HOME/conf/$HOST
	    DIRECTORIES=$DIRECTORIES:$HOME/conf/default

	SPLIT[$file]='regular-expression'
	    If this is defined for a file with name
	    $file.#, where # is a natural number, then
	    before anything else is done involving files
	    named $file.# for any natural number #,
	    the file f=target-directory/$file is split
	    into part files named f.0, f.1, ... .  The
	    splitting is done by treating any line
	    matching the regular-expression as the
	    beginning of a new part file of f.  Then
	    after everything else is done the part
	    files f.0, f.1, ... are concatenated to
	    reassemble f.

	    E.g., if SPLIT[etc/passwd]="walton" then
	    a source file .../etc/passwd.1 with target
	    directory / causes the file /etc/passwd to
	    be split into files /etc/passwd.0,
	    /etc/passwd.1, before anything is done
	    involving source files .../etc/passwd.#,
	    where the line beginning with `walton'"'"'
	    starts the file /etc/passwd.1.  Then after
	    all other processing is finished, the files
	    /etc/passwd.{0,1} are concatenated to form
	    /etc/passwd.

	    However, if one of the files modified by
	    this process does not change, it is not
	    actually rewritten, so its date does not
	    change.

	CONF[$file]='"'"'PPP AAA ...'"'"'
	    If this is defined for a given $file, then
	    the main action of conf is done when conf
	    calls

	        PPP AAA ... COMMAND FILE \
		    SOURCEFILE TARGETFILE TMPFILE \
		    VERBOSE HOST

	    where

	      PPP AAA ...  Names a program and
			   initial arguments.

	      COMMAND	   Is `put'"'"' or `get'"'"'
			   according to the map:

			   put, pdiff, ptest -> put
			   get, gdiff, gtest -> get

	      FILE	   Is the relative file name,
	      		   and is for error messages.

	      SOURCEFILE   The source file name.

	      TARGETFILE   The target file name.

	      TMPFILE	   The name of a temporary file
			   to be created and written by
			   PPP.

	    The execution of PPP should create a TMPFILE
	    that will be used to replace TARGETFILE for
	    a `put'"'"' command or to replace SOURCEFILE
	    for a `get'"'"' command.

	    PPP can be an external program or a bash
	    function.  The following are default values
	    as indicated:

	    CONF[etc/passwd]=conf_helper passwd
	        File lines are compared and updated
		individually, with lines being
		identified by account name.  For put it
		is assumed that the source file takes
		precedence for which account names,
		i.e., which lines, should be in the
		files, and for the order of these lines.
		For get the target file takes precedence
		for these matters instead.

		Otherwise for the shell name the target
		has precedence and for all other fields
		in the source has precedence.

	    CONF[etc/shadow]=conf_helper shadow
	        File lines are compared and updated
		individually, with lines being
		identified by account name.  For put it
		is assumed that the source file takes
		precedence for which account names,
		i.e., which lines, should be in the
		files, and for the order of these lines.
		For get the target file takes precedence
		for these matters instead.

		The password field in the source file
		has the form:

		    !host!host!...!password

		indicating that the account is enabled
		on the listed hosts (which are matched
		to the HOST variable value) and disabled
		on other hosts.  Furthermore the
		password should be set on the first
		listed host and propagated to the other
		hosts.

		If the current HOST is the first host
		listed in the source, the target
		password takes precedence and should
		be copied to the source password after
		the host list.  If the current HOST is
		listed but not first, the source
		password should be copied to the target.
		If the current HOST is not listed in the
		source, but there are listed hosts, the
		target should be set to the password
		from the source prefixed by !!.  If
		there are no listed hosts in the source,
		the source password is copied to the
		target.

		Note that the source password itself can
		begin with a sequence of !'"'"'s, as in

			!somehost!!!$1$89ce4A89B3
		and

			!somehost!!!

		For fields giving the date of the last
		password change and date when the
		account was last disabled, the target
		takes precedence if the current HOST is
		the first host listed in the source, and
		otherwise the source takes precedence.
		For all other fields the source takes
		precedence.

		For put, a line in the source that is
		not in the target is used to create a
		line in the target, resetting the
		password in the line as above, according
		to whether or not HOST is listed in the
		source line or there is no host list in
		the source line.  For get, a line in the
		target that is not in the source is used
		to create a line in the source with its
		password prepended by !HOST!.

	    CONF[etc/cups/printers.conf]=\
	    		conf_helper printers.conf
	        The target takes precedence for lines
		beginning with any of:

			#
			State
			Accepting

		For all other lines the source takes
		precedence.' | less -F

    exit 1
    ;;
put|get|ptest|gtest|pdiff|gdiff)
    ;;
*)
    echo "ERROR: undefined command: $command"
    exit 2
    ;;
esac

# We prepare to use tmp files
#
tmpfile=/tmp/conf$$-tmp
trap "$nodebug rm -f $tmpfile*" EXIT

# Symbol table.
#
declare -a symbol CONF SPLIT
#
# Return the index of symbol in status $?.
#
symbol() {
    local -i i size=${#symbol[*]}
    for((i=1;i<=size;++i))
    do
        if [ "${symbol[i]}" = "$1" ]
	then
	    return $i
	fi
    done
    symbol[++size]="$1"
    return $size
}

symbol etc/passwd
CONF[$?]='conf_helper passwd'
symbol etc/shadow
CONF[$?]='conf_helper shadow'

. ${CONFRC:-$HOME/conf/confrc}

# change_file tmp f
#
#    If file tmp != f, move attributes from f to tmp,
#    rm -f f and mv tmp f.  If f does not exist, mv
#    tmp f and print f's attributes.  Else rm tmp.
#    Return 0 if mv executed, 1 otherwise.
#
change_file() {
    if [ ! -e "$2" ]
    then
	mv "$1" "$2"
	echo "NOTE: created $2:"
	ls -Z "$2"
	return 0
    elif cmp -s "$1" "$2"
    then
	rm -f "$1"
	return 1
    else
	cpattr "$2" "$1"
	rm -f "$2"
	mv "$1" "$2"
	return 0
    fi
}

# split_file f b
#
#    Split the file f into f.0, f.1, ... where the parts
#    after the first begin with lines matching the
#    regular expression SPLIT[$b].  Only change files
#    that are changed by this process.
#
#    Return number of parts file was split into.
#
declare -a split split_target split_parts
splits=""
split_file() {
    local _f="$1"
    local _b=$2
    local _re=${SPLIT[$_b]}
    local _c=0
    if [ -e "$_f" ]
    then
	local _p=""
	exec 3<"$_f"
	rm -f "$tmpfile.$_c"
	exec 4>"$tmpfile.$_c"
	while read -r <&3
	do
	    if [[ "$REPLY" =~ $_re ]]
	    then
		exec 4>&-
		cpattr "$_f" "$tmpfile.$_c"
		if change_file "$tmpfile.$_c" "$_f.$_c"
		then
		    _p="$_p .$_c"
		    echo "NOTE: changed $_f.$_c"
		fi

		let ++_c
		rm -f "$tmpfile.$_c"
		exec 4>"$tmpfile.$_c"
	    fi
	    echo "$REPLY" >&4
	done
	exec 3<&-
	exec 4>&-
	cpattr "$_f" "$tmpfile.$_c"

	if change_file "$tmpfile.$_c" "$_f.$_c"
	then
	    _p="$_p .$_c"
	    echo "NOTE: changed $_f.$_c"
	fi

	let ++_c

	local _d="" _df
	for _df in "$_f".*
	do
	   if [[ "$_df" =~ ^.*\.([0-9]+)$ ]]
	   then
	       local _dc=${BASH_REMATCH[1]}
	       if (( $_dc >= $_c ))
	       then
	           rm -f "$_df"
		   _d="$_d .$_dc"
	       fi
	   fi
	done

	$verbose echo "SPLIT $_f"
	$verbose echo "   BY $_re"
	$verbose echo -n "   INTO $_c PARTS"

	if [ "$_p" != "" ]
	then
	    $verbose echo -n " (RE)MAKING${_p}"
	else
	    $verbose echo -n " (RE)MAKING NONE"
	fi

	if [ "$_d" != "" ]
	then
	    $verbose echo " DELETING${_d}"
	else
	    $verbose echo ""
	fi
    fi
    return $_c
}

for dirlist in $DIRECTORIES
do
    targetdir=`echo $dirlist | cut -d: -f1`
    sourcedirs=`echo $dirlist | cut -s -d: -f2- \
    			      | tr : ' '`
    $verbose echo "TARGET DIRECTORY: $targetdir"

    # We find all the files in the source directories
    # and mark them done we find them.

    unset done
    declare -a done
    for dir in $sourcedirs
    do
	$verbose echo "SOURCE DIRECTORY: $dir"
	files=`find $dir -name RCS -prune \
		    -o -name CVS -prune \
		    -o -name SETUP -prune \
		    -o -name ATTIC -prune \
		    -o -type f -printf '%P\n'`
	for file in $files
	do
	    # If there are arguments beyond the command,
	    # require that some argument match the file
	    # name as per glob.  Note '*', '?', and '['
	    # must be quoted when given in the argument,
	    # and `/' is NOT a special character in the
	    # file name.
	    #
	    if [ $# -gt 0 ]
	    then
	    	found=0
		for arg in "$@"
		do
		    case "$file" in
		    $arg) found=1;;
		    esac
		done
		if [ $found = 0 ]
		then
		    continue
		fi
	    fi

	    # If we have processed the file already,
	    # don't do so again.
	    #
	    symbol $file
	    declare -i f=$?
	    if [ ${done[$f]:-no} = yes ]
	    then
	    	continue
	    fi
	    done[$f]=yes
	    $verbose echo "FILE: $file in $dir"

	    base="$file"
	    if [[ "$file" =~ ^(.*)\.([0-9]+)$ ]]
	    then
	        base=${BASH_REMATCH[1]}
	        ext=${BASH_REMATCH[2]}
		symbol $base
		declare -i b=$?
		regexp="${SPLIT[$b]}"
		if [ "$regexp" != "" ]
		then
		    if [ ${split[$b]:-no} = no ]
		    then
			tfile="$targetdir/$base"
			split_file "$tfile" $b
			split_parts[$b]=$?
			split[$b]=yes
			split_target[$b]="$tfile"
			splits="$splits $b"
		    fi
		    if (( $ext >= ${split_parts[$b]} ))
		    then 
		        let ++ext
		        split_parts[$b]=$ext
		    fi
		fi
	    fi

	    source=$dir/$file
	    target=$targetdir/$file

	    symbol $base
	    f=$?
	    program=${CONF[$f]:-}
	    if [ ! -e $target -a $command != put ]
	    then
		echo "TARGET MISSING: $file in $dir" \
		     "not in $targetdir"
	    elif [ "$program" = "" ]
	    then
		if [ ! -e $target ]
		then
		    echo "PUTTING $file in $dir"
		    rm -f $target
		    cpall $source $target
		    echo "NOTE: created $target"
		    ls -Z "$target"
		elif ! cmp -s $source $target
		then
		    case "$command" in
		    ptest|gtest)
			echo "DIFFERS: $file in $dir"
			;;
		    put)
			echo "PUTTING $file in $dir"
			if [ ! -w $target ]
			then
			    chmod u+w $target
			    echo "NOTE:" \
			         "chmod u+w $target"
			fi
			cptime $source $target
			;;
		    pdiff)
			echo "PDIFFING: $file in $dir"
			diff $target $source
			;;
		    get)
			echo "GETTING $file in $dir"
			rm -f $source
			cpall $target $source
			;;
		    gdiff)
			echo "GDIFFING: $file in $dir"
			diff $source $target
			;;
		    esac
		fi
	    else
		# Identify the command and the source
		# file src and destination file des
		# of the copy.
		#
		if [ $command = put \
		     -o $command = pdiff \
		          -o $command = ptest ]
		then
		    c=put
		    src="$source"
		    des="$target"
		else
		    c=get
		    src="$target"
		    des="$source"
		fi

		if [ "$verbose" = nop ]
		then
		    v=0
		else
		    v=1
		fi

		if [ "${HOST:-}" = "" ]
		then
		    echo "ERROR: HOST variable not set"
		    exit 2
		fi

		$debug echo $program \
		            $c $file \
			    $source $target $tmpfile \
			    $v $HOST
		if ! $program $c $file \
		              $source $target $tmpfile \
		              $v $HOST
		then
		    exit 2
		fi

		cpattr $src $tmpfile

		# If tmpfile equals des file do nothing
		#
		if ! cmp -s $tmpfile $des
		then
		    case "$command" in
		    ptest|gtest)
			echo "DIFFERS: $file in $dir"
			;;
		    put)
			echo "PUTTING $file in $dir"
			if [ ! -w $target ]
			then
			    chmod u+w $target
			    echo "NOTE:" \
			         "chmod u+w $target"
			fi
			cptime $tmpfile "$target"
			;;
		    pdiff)
			echo "PDIFFING: $file in $dir"
			diff "$target" $tmpfile
			;;
		    get)
			echo "GETTING $file in $dir"
			rm -f $source
			cpall $tmpfile "$source"
			;;
		    gdiff)
			echo "GDIFFING: $file in $dir"
			diff "$source" $tmpfile
			;;
		    esac
		fi

		$nodebug rm -f $tmpfile
	    fi
	done
    done
done

for b in $splits
do
    file=${split_target[$b]}
    p=${split_parts[$b]}
    regexp="${SPLIT[$b]}"
    rm -f "$tmpfile"
    exec 4>"$tmpfile"
    c=0
    newest="file.0"
    while (( $c < $p ))
    do
	if [ -e "$file.$c" ]
	then
	    if [ "$file.$c" -nt "$newest" ]
	    then
	        newest="$file.$c"
	    fi

	    exec 3<"$file.$c"
	    line=0
	    while read -r <&3
	    do
		if [[ "$REPLY" =~ $regexp ]]
		then
		    if (( $line != 0 ))
		    then
		        echo "ERROR: non-first line" \
			     "of $file.$c"
			echo "       matches $regexp"
			exit 2
		    elif (( $c == 0 ))
		    then
		        echo "ERROR: first line" \
			     "of $file.$c"
			echo "       matches $regexp"
			exit 2
		    fi
		else
		    if (( $line == 0 && $c != 0 ))
		    then
		        echo "ERROR: first line" \
			     "of $file.$c"
			echo "       does NOT match" \
			     "$regexp"
			exit 2
		    fi
		fi
		echo "$REPLY" >&4
		let ++line
	    done
	    exec 3<&-
	else
	    echo "ERROR: $file.$c IS MISSING"
	    exit 2
	fi

	let ++c
    done
    exec 4>&-

    cpattr "$newest" "$tmpfile"
    if change_file "$tmpfile" "$file"
    then
	echo "NOTE: changed $file"
        $verbose echo "REASSEMBLED $file FROM $p PARTS"
    fi
done

exit 0
