#!/bin/sh

## File: 	conf
## Author:	Bob Walton (walton@acm.org)
## Date:	Thu Mar 19 12:51:58 EDT 2009

nop() {
    do_nothing=
}

verbose=nop
if [ "$1" = "-v" ]
then
    verbose=echo
    shift
fi
command="$1"
shift

case "$command" in
-doc*)
	echo '
conf [-v] test|put|get|pdiff|gdiff [FILE-OR-SUBDIRECTORY ...]

    Finds the differences between copies of system files in the source
    directories and copies in the target directory.  The -v option makes
    operation verbose.  Exactly one of the following must be given:

      test      The files that would change if they were put are listed.
		By default this is tested by cmp(1).

      put	The source files are used to update the target files.
      		By default this is done by `cp -p'"'"'.  The target files
		need not pre-exist.

      get	The target files are used to update the source files.
      		By default this is done by `cp -p'"'"'.  The source files
		must pre-exist this command.

      pdiff	Perform a diff on the current target file and the file
      		that would replace it if a put were done.  By default
      		default this is computed by `diff target source'"'"'.

      gdiff	Perform a diff on the current source file and the file
      		that would replace it if a get were done.  By default
      		default this is computed by `diff source targer'"'"'.

    The source directories are a list of one or more directories.  If a
    file appears in several of these, only the first directory containing
    the file is is considered, and it hides the subsequent directories for
    that file.  Conf never creates new files in the source directories:
    sync always operates to update an existing file in a source directory.

    Only FILES that are arguments or within SUBDIRECTORIES that are
    arguments are considered, unless there are no FILES or SUBDIRECTORIES
    arguments, in which case all files in the source directories are
    considered.  The FILES and SUBDIRECTORY arguments are names relative
    to the source directories.

    There may be more than one target directory and for each an associated
    list of source directories.  All will be considered.

    The conf program begins by sourcing the ~/conf/conf.rc file, unless
    the CONFRC environment variable is defined, in which case the file
    named in that directory is sourced.  The sourced file should define
    the following global variables.  Note that since arrays with string
    subscripts are not allowed in bash, these are fudged by using

    	XXX[YYY]

    in what follows as shorthand for

    	symbol YYY
	XXX[$?]

    In other words, to find the element of the array XXX that corresponds
    to a string index YYY, first call the symbol function, and then use its
    returned status as the index into XXX.

	HOST
	    The name of the current host computer, in a form sufficient
	    to distiguish it from other computers being maintained by
	    the same conf files.  Usually the short hostname: example:

	    HOST=`hostname -s`

    	DIRECTORIES
	    This is a list each element of which is a : separated list
	    of directories.  For each element the first directory
	    listed is the target directory and the remaining are the
	    source directories in the order they are searched.  Example:

	    DIRECTORIES=/:/root/conf/`hostname -s`:/root/conf/default

	CONF[$file]=NNN
	    This is the name NNN of a program or bash function such that
	    the above commands are executed respectively by:

	    	NNN test  file sourcefile targetfile
	    	NNN put   file sourcefile targetfile
	    	NNN get   file sourcefile targetfile
	    	NNN pdiff file sourcefile targetfile
	    	NNN gdiff file sourcefile targetfile


	    where `file'"'"' is the file name relative to its
	    containing source and target directory, whereas
	    sourcefile and targetfile are the directory names
	    with `file'"'"' appended.

	    The following are default values as indicated:

	    CONF[etc/passwd]=passwd_conf
	        File lines are compared and updated individually, with
		lines being identified by account name.  For put and
		pdiff it is assumed that the source file takes precedence
		for which account names, i.e., which lines, should be in
		the files, and for the order of these lines.  For get
		and gdiff the target file takes precedence for these
		matters instead.

		Otherwise for the shell name the target has precedence
		and for all other fields in the source has precedence.

	    CONF[etc/shadow]=shadow_conf
	        File lines are compared and updated individually, with
		lines being identified by account name.  For put and
		pdiff it is assumed that the source file takes precedence
		for which account names, i.e., which lines, should be in
		the files, and for the order of these lines.  For get
		and gdiff the target file takes precedence for these
		matters instead.

		The password field in the source file has special syntax
		and consists of a sequence of the form:

		    !host!host!...!password

		indicating that the account is enabled on the listed
		hosts (which are matched to the HOST variable value)
		and disabled on other hosts.  Furthermore the password
		should be set on the first listed host and propagated
		to the other hosts.

		If the current HOST is the first host listed in the
		source, the target password takes precedence and should
		be copied to the source password after the host list.
		If the current HOST is listed but not first, the source
		password should be copied to the target.  If the current
		HOST is not listed in the source, but there are listed
		hosts, the target should be set to !!.  If there are
		no listed hosts in the source, the source password takes
		precedence.

		Note that the source password itself can begin with !,
		as in !somehost!!!$1$89ce4A89B3 and !somehost!!!.

		For fields giving the date of the last password change
		and date when the account was last disabled, the target
		takes precedence if the current HOST is the first host
		listed in the source, and otherwise the source takes
		precedence.  For all other fields the source takes
		precedence.

		For put, a line in the source that is not in the target is
		used to create a line in the target, resetting the
		password in the line as above, according to whether or not
		HOST is listed in the source line.  For get, a line in the
		target that is not in the source is used to create a line
		in the source with its password prepended by !HOST!.

	    CONF[etc/cups/printers.conf]=printers_conf
	        The target takes precedence for lines beginning with
		any of:

			#
			State
			Accepting

		For all other lines the source takes precedence.'

    exit 1
    ;;
test|put|get|pdiff|gdiff)
    do_noting=
    ;;
*)
    echo "Undefined command: $command"
    exit 2
    ;;
esac

# We prepare to use tmp files
#
tmpfile=/tmp/conf$$-tmp
trap "rm -f $tmpfile" HUP INT QUIT TERM EXIT

# Symbol table.
#
declare -a symbol
#
# Return the index of symbol in status $?.
#
symbol() {
    local -i i size=${#symbol[*]}
    for((i=1;i<=size;++i))
    do
        if [ "${symbol[i]}" = "$1" ]
	then
	    return $i
	fi
    done
    symbol[++size]="$1"
    return $size
}

passwd_conf() {

    if cmp -s "$3" "$4"
    then
    	return
    fi
    local command="$1"
    local file="$2"
    local source="$3"
    local target="$4"

    # Identify the command and the destination file
    # des of the copy.
    #
    if [ $command = put -o $command = pdiff ]
    then
	c=put
	des="$target"
    else
        c=get
	des="$source"
    fi

    if [ $verbose = nop ]
    then
        v=0
    else
        v=1
    fi

    conf_passwd_shadow $v ${HOST:-NONE} passwd $c \
        $file $source $target $tmpfile

    # If tmpfile equals des file return
    #
    if cmp -s $tmpfile $des
    then
        rm -f $tmpfile
	return
    fi

    case "$1" in
    test)
	echo "DIFFERS: $file"
	;;
    put)
	echo "PUTTING $file"
    	cp -p $tmpfile "$target"
	;;
    pdiff)
    	echo "PDIFFING: $file"
	diff "$target" $tmpfile
	;;
    get)
	echo "GETTNG $file"
    	cp -p $tmpfile "$source"
	;;
    gdiff)
    	echo "GDIFFING: $file"
	diff "$source" $tmpfile
	;;
    esac

    rm -f $tmpfile
}
symbol etc/passwd
CONF[$?]=passwd_conf

shadow_conf() {

    if [ -z "$HOST" ]
    then
        echo "ERROR: the variable HOST is not defined"
	exit 2
    fi

    if cmp -s "$3" "$4"
    then
    	return
    fi
    local command="$1"
    local file="$2"
    local source="$3"
    local target="$4"

    # Identify the command and the destination file
    # des of the copy.
    #
    if [ $command = put -o $command = pdiff ]
    then
	c=put
	des="$target"
    else
        c=get
	des="$source"
    fi

    if [ $verbose = nop ]
    then
        v=0
    else
        v=1
    fi

    conf_passwd_shadow $v $HOST shadow $c \
        $file $source $target $tmpfile

    # If tmpfile equals des file return
    #
    if cmp -s $tmpfile $des
    then
        rm -f $tmpfile
	return
    fi

    case "$1" in
    test)
	echo "DIFFERS: $file"
	;;
    put)
	echo "PUTTING $file"
    	cp -p $tmpfile "$target"
	;;
    pdiff)
    	echo "PDIFFING: $file"
	diff "$target" $tmpfile
	;;
    get)
	echo "GETTNG $file"
    	cp -p $tmpfile "$source"
	;;
    gdiff)
    	echo "GDIFFING: $file"
	diff "$source" $tmpfile
	;;
    esac

    rm -f $tmpfile
}
symbol etc/shadow
CONF[$?]=shadow_conf

. ${CONFRC:=$HOME/conf/confrc}

for dirlist in $DIRECTORIES
do
    targetdir=`echo $dirlist | cut -d: -f1`
    sourcedirs=`echo $dirlist | cut -s -d: -f2- | tr : ' '`
    $verbose "TARGET DIRECTORY: $targetdir"

    # We find all the files in the source directories
    # and mark them done we find them.

    unset done
    declare -a done
    for dir in $sourcedirs
    do
	$verbose "SOURCE DIRECTORY: $dir"
	files=`find $dir -name RCS -prune \
		    -o -name SETUP -prune \
		    -o -name Attic -prune \
		    -o -type f -printf '%P\n'`
	for file in $files
	do
	    # If there are arguments beyond the command, require
	    # that some argument equal file, or argument/ be a
	    # prefix of file.  We assume *, ?, [ are not in the
	    # argument.
	    #
	    if [ $# -gt 0 ]
	    then
	    	found=0
		for arg in "$@"
		do
		    case "$file" in
		    $arg|$arg/*) found=1;;
		    esac
		done
		if [ $found = 0 ]
		then
		    continue
		fi
	    fi

	    # If we have processed the file already,
	    # don't do so again.
	    #
	    symbol $file
	    declare -i f=$?
	    if [ ${done[$f]:-no} = yes ]
	    then
	    	continue
	    fi
	    done[$f]=yes
	    $verbose "FILE: $file in $dir"

	    program=${CONF[$f]:-}
	    if [ ! -e $targetdir/$file ]
	    then
	        case "$command" in
		test|diff|fulldiff|sync)
		    echo "TARGET MISSING: $file"
		    ;;
		put)
		    echo "PUTTING: $file"
		    cp -p $dir/$file $targetdir/$file
		    ;;
		esac
	    elif cmp -s $dir/$file $targetdir/$file
	    then
	        do_nothing=
	    elif [ "$program" = "" ]
	    then
	        case "$command" in
		test)
		    echo "DIFFERS: $file"
		    ;;
		diff)
		    echo "DIFF: $file"
		    diff $targetdir/$file $dir/$file
		    ;;
		put)
		    echo "PUTTING: $file"
		    cp -p $dir/$file $targetdir/$file
		    ;;
		sync)
		    echo "SYNCING: $file"
		    cp -p $targetdir/$file $dir/$file
		    ;;
		esac
	    else
		$program $command $file $dir/$file $targetdir/$file
	    fi
	done
    done
done

exit 0
