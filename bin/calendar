#!/bin/bash
#
# calendar printout program
#
# File:		calendar
# Author:	Bob Walton (walton@deas.harvard.edu)
# Date:		Fri Mar  5 07:33:39 EST 2004
#
# The authors have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.
#
# RCS Info (may not be true date or author):
#
#   $Author: walton $
#   $Date: 2004/03/05 13:26:45 $
#   $RCSfile: calendar,v $
#   $Revision: 1.6 $
#
# The next line starts tclsh \
exec tclsh "$0" "$@"

set document "
calendar \[date \[days\]\] <calendar-file

Outputs each line of calendar-file that contains a date
or any of the following `days' days.  The date argument
defaults to the current date and the days argument to 3.
Dates in the file are in `month day' form, where month
can be a number or an abbreviation with 3 or more
letters.  The month and day can be separated by any
sequence of spaces and slashes, the month can be pre-
ceeded by any non-alphanumeric, and the day can be
followed by any non-alphanumeric.  Years are ignored."

if { [regexp {^-doc} [lindex $argv 0]] } {
    puts $document
    exit 1
}

set mark "************************************"
set mark $mark$mark

# set month = {m1 m2 m3 m4} and day = {d1 d2 d3 d4}
# where m1/d1 is today, m2/d2 tommorrow, m3/d3 the
# day after tommorrow, etc.
#
if { $argc >= 1 } {
    if { [catch { set time \
                      [clock scan [lindex $argv 0]] }] \
	        } {
        puts "calendar: BAD DATE: [lindex $argv 0]"
	exit 1
    }
} else {
    set time [clock seconds]
}
if { $argc >= 2 } {
    set days [lindex $argv 1]
    if { ! [regexp {[0-9]+} $days] } {
        puts "calendar: BAD NUMBER OF DAYS: $days"
	exit 1
    }
} else {
    set days 3
}
set month {}
set day {}
set count 0
while { $count <= $days } {
    set date [clock format $time -format "%m %d"]
    set m [lindex $date 0]
    regexp {^0*([1-9].*)$} $m forget m
    set d [lindex $date 1]
    regexp {^0*([1-9].*)$} $d forget d
    lappend month $m
    lappend day $d
    incr time [expr 24 * 60 * 60]
    incr count
}

# Go through the lines of stdin printing those with
# a date matching one of those listed in month/day.
#
set found no
while { "yes" } {

    set line [gets stdin]
    if { [eof stdin] } break
    regsub -all "\[ \t/\]+" $line " " items
    set last ""
    foreach item [split $items " "] {

	set ditem $item
	regexp {^0*([1-9][0-9]*)($|[^a-zA-Z0-9])} \
	       $ditem forget ditem
	set index [lsearch -exact $day $ditem]
        if { $index < 0 } {
	    set last $item
	    continue
	}
 
 	regexp {(^|[^a-zA-Z0-9])([a-zA-Z0-9]+)$} \
	       $last forget forget last
	set last [string tolower $last]
	set len [string length $last]
	set lenm1 [expr $len - 1]
	if {    [regexp {^[a-z]*$} $last] \
	     && $len >= 3 } {
	    set m 1
	    foreach mon { january february march \
	    		  april may june \
			  july august sepember \
			  october november december \
			} {
	        if {    [string range $mon 0 $lenm1] \
		     == $last } {
		    set last $m
		    break
		}
		incr m
	    }
	}

	regexp {^0*([1-9].*)$} $last forget last
        if { $last == [lindex $month $index] } {
	    if { $found == "no" } {
	        set found yes
		puts ""
		puts $mark
	    }
	    puts $line
	    break
	}
	set last $item
    }
}
if { $found } {
    puts $mark
    puts ""
}
exit 0
