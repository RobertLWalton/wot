#!/bin/bash
#
# File:		gitpullinto
# Author:	Bob Walton <walton@acm.org>
# Date:		Mon Oct 19 03:57:15 EDT 2015
#
# The author(s) have placed this program in the public
# domain; they make no warranty and accept no liability
# for this program.


case $1 in -doc*)
    echo "
gitpullinto repository
    Pull all the commits from the given repository into
    the current repository.  It is assumed that the
    files in the given repository are not in the current
    repository.  All the commits in the given repository
    are redone in the current repository.

    The current repository must have an origin and be
    sync'ed with its origin, so that if anything goes
    wrong the current repository can be deleted and
    recovered from its origin.  This is checked first,
    and if not the case, gitpullinto complains and
    aborts."

    exit 1
    ;;
esac

stat=`git status --porcelain -uno`
if test "$stat" != ""
then
    echo There are uncommitted files:
    echo "$stat"
    echo Commit before pullinto.
    echo Aborting.
    exit 1
fi

if [ -z "`git branch -r | grep origin`" ]
then
    echo Current repository has no remote origin.
    echo Aborting
    exit 1
fi

if [ -n "`git fetch --dry-run`" ]
then
    echo "remote repository and local origin/HEAD" \
         "differ"
    echo Aborting
    exit 1
fi

if [ "`git diff --name-only HEAD origin/HEAD`" ]
then
    echo "HEAD and origin/HEAD differ"
    echo Aborting
    exit 1
fi

echo git fetch "$1"
git fetch "$1"
echo git checkout -q FETCH_HEAD
git checkout -q FETCH_HEAD
echo git rebase -q --committer-date-is-author-date \
         master
git rebase -q --committer-date-is-author-date master
echo git branch FETCHED
git branch FETCHED
echo git branch -M FETCHED master
git branch -M FETCHED master
echo git checkout master
git checkout master
echo git branch --list -a
git branch --list -a
