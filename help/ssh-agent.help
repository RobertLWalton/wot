SSH HELP                   Mon Mar  9 14:03:43 EDT 2009


Purpose
-------

Here we describe a way of using SSH keys and the
ssh-agent program on UNIX to provide a near maximum of
security and at the same time a maximum in ease of use.
The main idea is that when you log into your laptop,
home computer, or office computer, you will have to type
your password twice, and then you will be able to access
any of your remote accounts without having to retype
your password.  In addition, if you give each of the
computers you log into separate passwords and SSH keys,
then if any of these are compromised (e.g., if you lose
your laptop), you can easily adjust your remote accounts
so that computer can no longer access them.


Choosing Passwords
-------- ---------

The password you choose for each computer that you log
into using a password should be unique and secure.  The
passwords of remote accounts that you almost never log
into using a password should be unique long random
strings of letters and digits that you carry in
your wallet.

One good way to choose a password that you will use
frequently is to think of a long sentence that you can
remember and that only you would be likely to think of.
Then take the first letters of each word, and for some
words, take the obvious related character instead.  For
example, if you chose the sentence

    At Harvard we love to tweak the bottoms of tyrants
    @  h       w  l    2  t     t   b       o  t

    and teakettles.
    &   t

you might get `@hwl2ttbot&t'.

Choosing long random passwords composed of letters and
digits could be done by using alternating sequences of
a single lower case letter and 1 to 3 digits.  E.g.,
`86f294b3p70g'.  These are easy to type when you have
to.


Making SSH Keys
------ --- ----

For each computer you log into make a pubic/private key
pair by executing:

	ssh-keygen

and giving it your password for the computer.  The
private key is in ~/.ssh/id_rsa and you should never
have to bother with this file.  The public key is in
~/.ssh/id_rsa.pub and you should do the following with
this file.

First, look at the file with an editor; its a single
long line.  The last field (string of non-whitespace
characters) in the line is a comment that should tell
you which computer the key was generated on.  If it
does not tell you this, edit it to name your computer,
but be sure to leave the rest of the line untouched.

Then copy the id_rsa.pub file to a file whose name
has the form XXX_id_rsa.pub where XXX names the
computer on which the key pair was generated.

If you ever run ssh-keygen again it will wipe out
the private key, so you may want to make a copy
of id_rsa in XXX_id_rsa so you can undo any damage
from accidents.


Using The SSH Agent
----- --- --- -----

Your private key is now stored in ~/.ssh/id_rsa but is
encrypted by your password.  Only an unencrypted
version can be used by ssh.  The ssh-agent program,
which can be started when you log in, can store an
unencrypted version of the private key and make it
available to ssh whenever that latter needs it, so you
do not have to retype your password whenever you use
ssh.

To enable ssh-agent put the following in the designated
files:

    If you use the /bin/bash shell:

        .bash_profile:

	    if [ -z "${SSH_AUTH_SOCK:-}" ]
	    then
		eval `ssh-agent`
		SSH_AGENT_STARTED=$$
		export SSH_AGENT_STARTED
	    fi

	.bash_logout:

	    if [ -n "${SSH_AGENT_PID:-}" ]
	    then
		if [ "$SSH_AGENT_STARTED" = $$ ]
		then
		    eval `ssh-agent -k`
		fi
	    fi


    If you use the /bin/tcsh shell:

	.login:

	    if ( ! $?SSH_AUTH_SOCK ) then
		eval `ssh-agent`
		setenv SSH_AGENT_STARTED $$
	    endif

	.logout:


	    if ( $?SSH_AGENT_PID ) then
		if ( "$SSH_AGENT_STARTED" == $$ ) then
		    eval `ssh-agent -k`
		endif
	    endif

These file entries will start an ssh-agent when you
log in and kill it when you log out (the latter is very
important, as otherwise ssh-agents will accumulate.

To use the agent, immediately after you log in execute

	ssh-add

and give it your password.  This will load your private
key from ~/.ssh/id_rsa (or id_dsa) into your ssh-agent.
As you will be doing this every time you log in, you
may want to alias a short name for ssh-add; for example:

    If you use the /bin/bash shell:

        .bashrc:

	    alias key=ssh-add

    If you use the /bin/tcsh shell:

        .cshrc:

	    alias key ssh-add


Propagating Your Public Key
----------- ---- ------ ---

Now if you have a remote account NNN@HHH that you
want to access, using your key pair

	~/.ssh/id_rsa     ~/.ssh/XXX_id_rsa.pub

then you need to append ~/.ssh/XXX_id_rsa.pub to the
end of the NNN@HHH account's

	~/.ssh/authorized_keys

file.  This last file consists of lines each of which
is a public key.  The holders of the private keys that
match these public keys are allowed to access the
NNN@HHH account without using a password.

To move your public key into the right place you
execute:

	scp ~/.ssh/XXX_id_rsa.pub NNN@HHH:.
	    [type ENTER when this types:
	        Enter passphrase for key '...':]
	    [type NNN@HHH's password when this types:
	        NNN@HHH's password:]
	    [this copies the public key]
	ssh NNN@HHH
	    [type ENTER when this types:
	        Enter passphrase for key '...':]
	    [type NNN@HHH's password when this types:
	        NNN@HHH's password:]
	    [this logs you into the NNN@HHH account]
	mkdir .ssh; chmod 700 .ssh
	    [do this if .ssh does not exist in NNN@HHH]
	mv XXX_id_rsa.pub .ssh
	cd .ssh
	cat XXX_id_rsa.pub >> authorized_keys
	chmod 600 authorized_keys
	logout

At this point you should be able to log into the NNN@HHH
account using

	ssh NNN@HHH

without a password (if you remembered to ssh-add your
private key to your running ssh-agent).


Editing Your Configuration
------- ---- -------------

You will probably also find it helpful to make the
file

    ~/.ssh/config

on the computer you log into and put into it

    ForwardAgent yes
    # ForwardX11 yes
    # LogLevel DEBUG

Here the # comments out lines you normally do not need
but might find useful from time to time.

The `ForwardAgent yes' line causes your ssh-agent to be
`forwarded' to any account you log into using ssh.  If
you are using cvs, the source code control system, this
is likely to be useful.  For example, suppose you have a
remote account NNN@HHH and are using a cvs repository in
another remote account CCC@JJJ.  Then if you log into
NNN@HHH and try to use the cvs repository from there,
without setting ForwardAgent to yes, you will have to
use your password again to use cvs on NNN@HHH.  But if
you set ForwardAgent to yes, then when you log into
NNN@HHH your ssh-agent from your login computer will be
forwarded to and become a running ssh-agent in account
NNN@HHH, and you will not have to set up another agent
in that account or type your password when accessing
CCC@JJJ from NNN@HHH.

The `ForwardX11 yes' line if not commented-out permits
programs in the account you log into (NNN@HHH) to use
the X-server on your login machine.

Forwarding of any kind should not be used unless
necessary because of Security Issues covered in the
next session.  Often ssh-agent forwarding is too useful
not to use, especially among cvs users, whereas X11
forwarding is rarely needed.

Setting the LogLevel to DEBUG is useful only if you are
trying to find out exactly why your ssh is failing to
connect.


Security Issues
-------- ------

Suppose you start in a login account LLL and from there
log into a remote account NNN@HHH and from there log in
or use the cvs repository in another remote account
CCC@JJJ.  Thus there is an access pattern

    LLL   --->   NNN@HHH   --->   CCC@JJJ

The first observation is that any intruder who breaks
into any account A1 that you use to log into or access
another account A2 has an excellent chance of breaking
into A2 without your knowing it by using a Trojan Horse.
Thus using a Trojan House an intruder who breaks into
NNN@HHH can break into CCC@JJJ with an excellent chance
of success without detection.

Use of ssh or ssh-agent neither helps or hinders this
situation.

However, there special issues with X11 forwarding and
ssh-agent forwarding.

First and simplest, use of X11 forwarding permits an
intruder to break in backwards.  This is, to break
into A1 after having broken into A2 (where A1 ---> A2).
So if ForwardX11 is set yes in LLL, then if an intruder
breaks into NNN@HHH, the intruder may be able to mount
a Trojan Horse the allows the intruder to break into
LLL.

Ssh-agent does NOT have this backward break-in problem.
Ssh-agent never gives out the private keys it stores.
Instead it takes messages it is sent, encrypts them with
the private keys, and returns the encrypted results,
thus proving it posses the private keys without
revealing the private keys.

However in more complex circumstances ssh-agent does
have an additional vulnerability to break-ins.  Suppose
the access pattern is

	LLL   --->   NNN@HHH   --->   CCC@JJJ
	 |                               ^
	 |                               |
	 +------->   PPP@KKK   ----------+

If you use ssh-agent forwarding and in intruder breaks
into NNN@HHH, then the intruder can deploy a Trojan
Horse that uses your ssh-agent forwarded to NNN@HHH to
break into PPP@KKK.  This is because the intruder can
get the agent to encrypt messages using its private keys
that permit access not only to NNN@HHH and CCC@JJJ but
also to PPP@KKK.

You can get around this by using two separate key pairs
for the two access patterns

	LLL   --->   NNN@HHH   --->   CCC@JJJ

and 

	LLL   --->   PPP@KKK   --->   CCC@JJJ

See ssh-zones.help if you really want to do this.

However, Trojan Horses in the UNIX environment are not
very common, so people have been getting by so far
(2009) without paying much attention to this.


File:		ssh-agent.help
Author:		Bob Walton (walton@deas.harvard.edu)
Date:		Mon Mar  9 14:14:27 EDT 2009

The authors have placed this file in the public domain;
they make no warranty and accept no liability for this
file.

RCS Info (may not be true date or author):

    $Author: walton $
    $Date: 2009/03/09 18:26:18 $
    $RCSfile: ssh-agent.help,v $
    $Revision: 1.4 $
