SSH HELP

File:		ssh.help
Author:		Bob Walton (walton@deas.harvard.edu)
Date:		Fri Jun 27 08:05:38 EDT 2003

SSH, the `Secure Shell', is just a way of connecting to
a remote computer's account so you can use a shell in
that account from your local computer.  The command

	ssh  login-name@host-name

will connect you to the named remote account on the
named remote host, assuming that host runs the SSH
daemon, `sshd'.  This command will require you to type
the password for the remote account (but more on this
below).  After you have been connected, commands you
type will go to the normal shell of the remote account
on the remote host, and the output of that shell will
return to your terminal.  In addition, any X-windows
activity in the remote account will be rerouted to your
local account's X-windows server.

The first time you use ssh for a particular remote
host, you will be told that the host cannot be authenti-
cated, and you will be asked whether you want to contin-
ue.  Normally you answer yes, and keys that can be
used to authenticate that host are stored in a file
somewhere so you do not have to repeat this process.

Note that if you use different names for the same remote
host you will be asked about continuing the first time
you use each distinct name.  The key storage system only
knows the names you use, not the actual identity of the
host.

If after storing authentication keys for a remote host,
the sshd daemon running on that host changes its keys
(as when new software is installed on that host), you
will not be able to connect to the remote host, and are
likely to get strange error messages indicating protocol
problems (e.g., `bad string ...') whenever whenever you
try to connect to the host.  If this happens, you need
to delete all authentication keys previously used for
the host, and then get new authentication keys by con-
necting to the host with ssh and answering `yes' to the
continuation question.  The authentication keys to be
deleted are single long lines in the files

	.ssh/known_hosts	.ssh/known_hosts2

or files in the directory

	.ssh2/hostkeys

The lines or host_keys file names give the name of the
remote host whose keys they store.  As a remote host may
be known under several names, ALL keys relating to ANY
of these several names for the host must be deleted.

The only security problem that answering `yes' actually
causes is that if a hacker has compromised the internet
name server you used to locate the remote host, you
can end up talking to the hacker's computer thinking it
is the remote host.  But its much more likely that a
hacker will compromise the remote host itself, rather
than an internet name server, so you should not worry
about answering `yes'.  However, if you learn that a
remote host has been compromised, you should delete
all authentication keys for the host, and wait until
the host is reinitialized before connecting to it again.

The commands

    scp [-rp] local-file-name \
	      login-name@host-name:remote-file-name

    scp [-rp] login-name@host-name:remote-file-name \
	      local-file-name

can be used to copy files to or from your current local
directory and the home directory of the remote account
on the remote host.  You can also use pathnames and
copy directories.  -r copies directories recursively,
and -p preserves file modes (rwx).  Scp is layered on
top of ssh, and requires the same passwords.

SSH replaces the previous RSH (and rcp) commands of
UNIX, and the telnet (and ftp) internet commands.  The
advantage of SSH is that is encrypts all data it sends
over the internet, so only your local host and the
remote host can see the actual data.  SSH has become
ubiquitous in many places, including large universities,
because system hackers would get control of a single
less secure computer on a university network, and use
that computer to snoop the network and read the unen-
crypted passwords that the telnet and ftp protocols were
transmitting.  SSH makes this impossible.

SSH also has a very effective and secure mechanism for
enabling you to avoid typing passwords every time you
use it, which we will now explain.  This mechanism is
based on SSH keys, which actually always come in pairs,
one `public' and one `private'.  First you make a key
pair.  Then you put your public key in a special file
in all the accounts you want to access remotely.  You
put your private key in another special file in all the
accounts you want to use locally, typically just the
accounts on computers you have physical access to, such
as your computer at home and your desktop at work.  Then
under the right circumstances, to be described, SSH (and
scp) will use the keys instead of passwords, and will
still be secure.

The keys are structured so that someone who knows a
public key cannot compute its paired private key.  Thus
it is unnecessary to hide public keys from the world.
In particular, if a remote account or its host is com-
promised, this does NOT compromise any private key not
stored on the compromised host, even if that private key
is used to access that host while it is compromised.

However, it is necessary to hide private keys.  One way
to do this is to just have a different private key for
every local account, and if that local account or its
computer is hacked, immediately delete all the associa-
ted public keys from all the remote accounts.

A second more secure way is to encrypt the private key
with a password and run a process called an SSH agent in
your local account.  The first time you use a private
key, you are asked to type its password, and the unen-
crypted private key is stored in the SSH agent process,
from which SSH can retrieve it whenever it is needed.
The agent process can be created automatically when you
log in to your local account, and destroyed automatical-
ly when you log out.  So the only thing you have to do
is type the password in once when you log in to the
local account.  You can even make the password be the
same as the password of your local account.

It is still wise to assume that if your local account or
its computer is hacked, you should immediately delete
all public keys associated with the private key on the
hacked account from all remote accounts.  However, the
chances of the hacker having actually discovered your
password for the hacked computer are slightly less,
since the hacker, instead of simply reading files from
your computer's disk, would have to monitor your
computer at the moment you logged into it and used
passwords.  Eventually hackers will learn to do this
regularly by means of trojan horses, or more specifical-
ly, slightly alterred versions of the SSH agent program
that transmit the keys they record to a hacker.  But for
now hackers tend to fall on easier prey, while system
administrators are getting better at immediately identi-
fying when a computer has been hacked an shutting it
down.

First we will describe how to generate keys and set
up agents on the RedHat Linux 7.2 system.  Then we will
describe other systems to some extent.

The RedHat 7.2 SSH is `OpenSSH_2.9p2, SSH protocols
1.5/2.0, OpenSSL 0x0090602f'.

There are three kinds of key pairs you can generate:

	rsa1	RSA for SSH protocol 1
	rsa	RSA for SSH protocol 2
	dsa	DSA for SSH protocol 2

If you are unsure which to use, use rsa.  But if you are
going to connect to a legacy remote account whose
computer only understands the older SSH protocol 1, you
may need to use rsa1.  RSA is a standard developed by
the university professors Rivest, Shamir, and Adlenam.
DSA, Digital Signature Algorithm, is a government stan-
dard developed by NIST, the National Institute of Stan-
dards and Technology, for use in a digital signature
system (called DSS).

To generate an rsa key use the command

	ssh-keygen -t rsa1 -f file-name

The private key is generated in the named file.  The
public key is generated in the `file-name.pub' file.
You are asked for a password to be used to encrypt the
private key.  If you just type ENTER to give an empty
password, the private key will not be protected by a
password.  The password on a private key file can be
changed by

	ssh-keygen -p -f file-name

There is NO WAY to recover a lost password.

If you do not give a file name to the above commands,
the name `~/.ssh/id_rsa' is used.  With this in mind,
a good file name is something like

	~/.ssh/account-name_host-name_id_rsa

that identifies the account using the private key and
the type of key.

The `~/.ssh' directory is the directory in which all SSH
key files are normally kept, along with other SSH files
such at the known_hosts file mentioned above.

To install a public key on a remote account, simply add
the contents of the key's .pub file, which is a single
long line, to the file

	.ssh/authorized_keys2

in the remote account.  Note that unlike host authenti-
cation keys above, there is no problem with key names
in these files.  When ssh connects, all the private keys
available to it are checked against all the public keys
on the remote host, and if any match, the connection is
allowed.

Its possible to give the private key name to ssh and scp
by using the `-i key-file-name' option, but there are
ways for avoiding the need for this option.

If you want to avoid giving private key file names to
ssh programs, and you have just one private key of
each type (rsa, rsa1, dsa) in each local account, then
in each local account you can symbolically link the file
name

	~/.ssh/id_rsa

to your private key.  This is where all SSH programs
will look when they are not given a `-i' option and
there is no ssh agent which is already storing the key.

To run an ssh-agent you should set up each local account
so a process running the ssh-agent program is started
when you log in and stopped when you log out.  This can
be done by adding

    if ( ! $?SSH_AUTH_SOCK ) then
	eval `ssh-agent`
	set ssh_agent_started
    endif

to your ~/.login file and

    if ( $?ssh_agent_started ) then
	eval `ssh-agent -k`
    endif

to your ~/.logout file, if you are using the tcsh
(a.k.a. csh) shell.  If you are using the bash shell,
you must add commands similar to these but using a
different shell language syntax to your ~/.profile and
~/.bash_logout files.

You also may find it helpful to make a ~/.ssh/config
file containing the line

    ForwardAgent yes

This causes a secure socket connection to your ssh-agent
program to be forwarded to any other computer account
you log into with ssh.

The first time you use a private key file while an ssh-
agent process is running, you the file will be loaded
into the agent.  If the file is protected by a password,
you will be asked for the password at this time.  There-
after, whenever the private key is needed, all ssh and
scp will find it by looking in the agent, and not need
to consult you or be given a password.

You can load keys into the agent with the command

	ssh-add private-key-file-name ...

If several keys have the same password, you need to type
the password only once.  A good idea is to put the like

	alias key ssh-add private-key-file-name ...

in your .cshrc file, use the same password for all key
files, and upon loggin in locally, type the command
`key' and then the password.  This loads all your keys
into the agent and eliminates any subsequent need for
the password during your login session.

Using DSA is just like using RSA, just change `rsa' to
`dsa' in all file names given in the previous discu-
sion.

RSA1 is only useful if you must connect to a remote
computer that only supports SSH protocol 1, and does not
support SSH protocol 2.  To make such remote connections
you must

1. Perform the above procedures with the following
   name changes:

   Use `-t rsa1' instead of `-t rsa'.
   Use `identity' instead of `id_rsa'.
   Use `known_hosts' instead of `known_hosts2'.
   Use `authorized_keys' instead of `authorized_keys2'.

2. When using ssh and scp:

   Use `ssh -1' instead of `ssh'.
   Use `scp -o Protocol=1' instead of `scp'.

If you have all the key files

	.ssh/id_rsa
	.ssh/id_dsa
	.ssh/identify

then ssh programs will find all these keys without
being given key file names explicitly.

Not all SSH's use the same file names and file formats
as the `OpenSSH_2.9p2' in RedHat 7.2.  An example of
a different SSH that just understands protocol 1 is

    SSH Version 1.2.26 [sparc-sun-solaris2.6],
    protocol version 1.5.  Standard version.
    Does not use RSAREF.

However, this uses the same rsa1 file names as
`OpenSSH_2.9p2' in RedHat 7.2.

An example of of a different SSH that understands
protocol 2 is

    SSH Version 2.0.13 (also running under sun-solaris)

This SSH:

    Uses `~/.ssh2' instead of `~/.ssh'.
    Uses `~/.ssh2/hostkeys/*' instead of lines in
         `~/.ssh/known_hosts'.

    Uses the file `~/.ssh2/authorization' in combination
    with particular public key files instead of lines
    in the file `~/.ssh/authorized_keys2'.

Suppose you have public key files named fee.pub and
fi.pub, each containing a long line.  Inspection of that
line shows it has three parts, one of which is a long
string of random looking characters containing no
spaces.  This is the key proper, encoded in `base64',
a system of encoding that encodes 6 bits in a non-space
ASCII character.  To use this with `~/.ssh2' you make
files `~/.ssh2/fee.compub' and `~/.ssh2/fi.compub' with
the format:

    ---- BEGIN SSH2 PUBLIC KEY ----
    key-proper-on-one-line
    ---- END SSH2 PUBLIC KEY ----

and the file `~/.ssh2/authorization' containing

    Key fee.compub
    Key fi.compub

Forwarding keys does not seem to work when you log into
a remote account that uses this SSH form a local account
that uses OpenSSH, even though it is advertise to work.
