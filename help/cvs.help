CVS HELP		    Wed Apr  1 15:10:07 EDT 2009

Purpose
-------

CVS implements a `source code control system'.  The idea
is that you create a file FFF, and then check it into a
CVS repository.  This creates a file FFF,v in the repo-
sitory that holds a copy of the first `revision' of the
file, revision 1.1. or r1.1.  You then modify the file
and check it in again, storing the second revision,
r1.2.  This process continues indefinitely.  The file
FFF,v holds ALL the revisions of the file FFF; it stores
the differences between successive revisions, rather
than the revisions themselves, in order to save space.

The greatest use of a CVS repository lies in the fact
that the account containing the repository does NOT have
to be the same as the account in which you work on the
files.  You can put the repository in a repository
account, and then from a different working account any-
where in the world, you can check out a complete
project's worth of files with a single command, use and
modify the project files, and then check all the modi-
fied files back into the repository with a single com-
mand before you log out of the working account.  Then
later you can go to a different working account and
repeat the process, always having the most recent
revision of the files available.

Two or more people can also work on the same project
using separate working accounts, as long as they do not
modify the same file at the same time.

There are some other uses of a source code control
system.  A common one is to compute the diff listing
between your current working modified files and the
last revisions checked into the repository.  This allows
you to proof read your changes and be sure you have not
done something stupid.  And you also know that if you do
make some horrible change, you can always get older
revisions out of the repository and undo the change.

CVS is standardly installed in modern UNIX systems, and
it is possible to install CVS under other operating sys-
tems.  The web site for CVS is http://cvs.nongnu.org/,
which has free downloads for common operating systems.

In this help file we will explain how to use CVS using
some small programs from the WOT library.  We will also
give rough equivalents for these WOT commands in case
you do not have the WOT programs.

Note on SSH and CVS Environment Variables
---- -- --- --- --- ----------- ---------

To use CVS you must be able to communicate between all
your accounts using SSH.  You should be able to do so
without typing a password every time you execute a
command in one account from another account, so if you
are not already doing this using ssh-agent, then you
need to read the ssh-agent.help file.

You also need to set the following two CVS environment
variables:

    In the .bashrc:

	CVS_RSH=ssh; export CVS_RSH
	CVSREAD=; export CVSREAD

    In .cshrc (or .tcshrc)

	setenv CVS_RSH ssh
	setenv CVSREAD

The CVS_RSH variable instructs CVS to use SSH.  The
CVSREAD variable causes all your local files to be made
read only whenever you check them into or out of the
repository.  This prevents one of the dangers of CVS:
that you will accidentally modify a file, and then when
you check all the project files into the repository with
a single command while logging out of the working
account, you will check the accidentally modified file
into the repository along with your intentionally
modified files.  With CVSREAD, in order to modify a
file, you must first indicate your intention to do so
by making the file writable.


Creating A Repository
-------- - ----------

A repository in account AAA on host computer HHH is a
directory; assume the absolute path name of the
directory is /DDD.  To create the repository:

	log into AAA
	cvs -d /DDD init


Creating/Checking-Out a Project
--------------------- - -------

To create a project directory PPP and check it out
execute:

	cvsout -n AAA@HHH:/DDD PPP

The -n indicates this is a new project directory that
does not previously exist.  To just check out an exist-
ing project directory use

	cvsout AAA@HHH:/DDD PPP

In your working account the project directory will be
./PPP, which must not previously exist.  You can rename
it if you like.

The checked out files will be made readonly (if CVSREAD
is set: see Environment Variables above).

The non-WOT equivalents to the WOT commands are:

    cvsout -n AAA@HHH:/DDD PPP

	ssh AAA@HHH mkdir /DDD/PPP
	cvs -d AAA@HHH:/DDD checkout PPP
	(cd PPP; cvs update -P)

    cvsout AAA@HHH:/DDD PPP

	cvs -d AAA@HHH:/DDD checkout PPP
	(cd PPP; cvs update -P)


Creating New Project Subdirectories and Files
-------- --- ------- -------------- --- -----

To create a new project subdirectory SSS,

	mkdir SSS
	cvsadd SSS

To create a new project file FFF,

	<create FFF with an editor>
	cvsadd FFF

Cvsadd checks a new directory into the repository, BUT,
it does NOT check a new file into the repository.

The non-WOT equivalent to the WOT command is:

	cvsadd SSS:	cvs add SSS


Checking File Revisions Into the Repository
-------- ---- --------- ---- --- ----------

To check file FFF into the repository:

	cvscom FFF

(com stands for `commit' which is another word for
`check-in').

The file will be made readonly (if CVSREAD is set: see
Environment Variables above).

To modify an existing file and check the revision
back in

	mine FFF
	<edit FFF>
	cvscom FFF

Here `mine' is a WOT shorthand for `chmod u+w' that
makes the file writable.

However, you do NOT have to check in each file of a
project individually.  To check in ALL the files in the
project that you have modified since they were last
checked in,

	cd PPP
	cvscom

where PPP is the project directory in the working
account.

The non-WOT equivalents of the WOT commands are:

    cvscom FFF:		cvs commit -m update FFF
    cvscom:		cvs commit -m update
    mine FFF:		chmod u+w FFF


Checking Out Revisions from a Repository
-------- --- --------- ---- - ----------

Often when you log into a working account you find an
old version of project PPP already checked out.  To
make this version up to date,

	cd PPP
	cvsup

This replaces local copies of files with the latest
revisions of the files in the repository, thus moving
work you did more recently in other working accounts
to your current working account.

To make just one file FFF in a subdirectory SSS of PPP
up to date,

	cd PPP/SSS
	cvsup FFF

To make just the files in a just subdirectory SSS and
its subdirectories (recursively) up to date,

	cd PPP/SSS
	cvsup

The cvsup command tells you what it is doing by output-
ting lines like:

    ? FFF	Local file FFF has not been added to
    		the project.
    P FFF	Local file FFF has been made up-to-date
    		by patching it.
    U FFF	Repository file FFF did not exist local-
    		ly and has been created by copying it
		from the repository.
    M FFF	Local file FFF is a modification of the
    		most recent revision in the repository.
		The local file was not changed.
    C FFF	IMPORTANT: if you see this do
    		`cvsup -doc' for more information.
		It means the local and the repository
		versions of the file conflict.

To find you whether our files are up-to-date use

	cd PPP
	cvsutd

Cvsutd is identical in function to cvsup, except it does
not modify any files, and just produces the listing
above, which can be used to tell you which files would
be changed by cvsup, and also, via the `?' and `M'
lines, which files would be affected by `cvsadd' and
`cvscom'.

It can be useful to suppress `? FFF' lines from the
cvsutd listing so you do not have to continually read
them to see if something is amiss.  You can do this by

	cd <the directory containing FFF>
	cvsignore FFF

Here FFF should be a file you expect to NEVER check into
CVS.  It is not an error if this file ceases to exist,
is remade, etc.; it will continue to be ignored.

In place of FFF you can use a pattern which will sup-
press `? FFF' lines for files whose names match the pat-
tern.  For example

	cvsignore '*.ps'

You have to quote the pattern.  If you want to stop
ignoring a file see `cvsignore -doc'.

The non-WOT equivalents of the WOT commands are:

    cvsup:		cvs update -d -P
    cvsup FFF:		cvs update -d -P FFF
    cvsutd		cvs -n update -d -P
    cvsignore FFF:	<Add the line `FFF' to the
    			 ./.cvsignore file and check
			 ./.cvsignore into the
			 repository>


Making Diff Listings
------ ---- --------

You can make a diff listing of the local file FFF with
the last revision of the file you checked in with cvscom
or checked out with cvsup by:

    cvsdiff FFF | less

You can make a diff listing of all the files in the
project PPP by

    cd PPP
    cvsdiff | less

and all the files in a subdirectory SSS of the project,
and its subdirectories (recursively), by

    cd PPP/SSS
    cvsdiff | less

If instead of a diff with the last revision you checked
in or out you want a diff with the latest revision of
the file in the repository, use

    cvsdiff -rHEAD FFF | less

and similarly for the project or a subdirectory.  Using
-rHEAD as a cvsdiff option changes the repository
revision to the latest revision in the repository for
each file.  This is useful if you are about to cvsup
and want to see what changes you are about to incorpor-
ate in the local files.

You can also give diff(1) options to cvsdiff, such as
-b, -w, and --minimal.

The non-WOT equivalents of the WOT commands are:

    cvsdiff OPTIONS FFF:      cvs diff OPTIONS FFF 2>&1
    cvsdiff OPTIONS:          cvs diff OPTIONS 2>&1


Tagging Project Revisions
------- ------- ---------

Suppose you have gotten your project PPP to a stage
where it works fairly well, and you want to save the
current state of the project, for possible future
reference.  You can do this with

	cd PPP
	cvstag TTT

This will associate a tag TTT, or symbolic name, with
the current revision of every file in the project.
Then for commands that take a `-rX.Y' option, `-rTTT'
can be used instead to refer to the file revision that
was current when `cvstag TTT' was executed.

A good use of this is generating diff listings of files
with their TTT tagged revisions.  For example,

	cd PPP
	cvsdiff -rTTT | less

will generate a diff listing for every project file
that has been modified since the `cvstag TTT' command
with the revision of the file at the time the `cvstag
TTT' command was executed.

Another use is recovering the entire project state as
it was at the time of the `cvstag TTT' command.  This
can be done by

	cd <some directory not under CVS control>
	cvsout -rTTT AAA@HHH:/DDD PPP

Note, however, that the files so checked out should NOT
be modified and checked back in: they are for reference
only.

You can rename a tag by

	cvs PPP
	cvstagmv OLDTAG NEWTAG

and remove a tag by

	cvs PPP
	cvstagrm TAG

You can also tag all the files in a subdirectory of the
project by using `cd PPP/SSS' instead of `cd PPP'.

The non-WOT equivalents of the WOT commands are:

    cvstag TTT		cvsrm TTT <see below>
    			cvs tag TTT
    cvstagrm TTT	mkdir TMPDIR
    			cd TMPDIR
			cvs -d AAA@HHH:/DDD \
			    checkout -rTTT PPP
			cd PPP
			cvs tag -d TTT
			rm -rf TMPDIR
    cvstagmv OOO NNN	cvsrm NNN <see above>
    			mkdir TMPDIR
			cd TMPDIR
			cvs -d AAA@HHH:/DDD \
			    checkout -rOOO PPP
			cd PPP
			cvs tag -d OOO
			cvs tag NNN
			rm -rf TMPDIR

    Note: The only correct way to remove or rename a tag
    is to check out the tagged revision of the project
    into a temporary directory, remove or rename the tag
    in that revision, and delete the temporary directory
    and the corresponding revision.  Otherwise files in
    the Attic (see below) are not handled correctly.


Removing, Copying, and Moving a File
--------- -------- --- ------ - ----

To remove a file FFF from the project,

	cvsrm FFF

This actually puts FFF in the Attic of its containing
directory.  The file then appears as if it has been
removed from the repository, unless one of its revisions
has a tag TTT, in which case CVS command that have the
-rTTT option and still refer to that revision.

If you want to completely expunge a file from the
repository you can

	cvsexpunge FFF

This gets rid of all trace of the file.  However, it is
a bad idea to do this if the file has any tagged
revisions (see cvslog below).

If you want to move (rename) a file use

	cvsmv OLDNAME NEWNAME

and if you want to make a copy use

	cvscp SOURCE TARGET

Renaming a file is equivalent to copying it and then
either cvsrm'ing the OLDNAME if the file has tags or
cvsexpunge'ing the OLDNAME if the file does not have
tags.  Copying a file FFF copies the FFF,v file in the
repository so the revision history of the TARGET is that
same as the revision history of the SOURCE, but all tags
are removed from the TARGET.

The non-WOT equivalents of the WOT commands are:

    cvsrm FILE		cvs remove -f FILE
    			cvs commit -m update FILE

    cvsexpunge FILE	ssh AAA@HHH \
                            rm -f /DDD/SSS/FILE,v
    			cvs update FILE

	of if in Attic	ssh AAA@HHH \
	                    rm -f /DDD/SSS/Attic/FILE,v

    cvscp SOURCE TARGET ssh AAA@HHH \
    			    cp -p /DDD/SSS/SOURCE,v \
			          /DDD/SSS/TARGET,v
			cvs update TARGET
			for all target tags:
			    cvs tag -d TAG TARGET

    cvsmv OLDNAME NEWNAME
    			cvscp OLDNAME NEWNAME
			if file had tags:
			    cvsrm OLDNAME
			else
			    cvsexpunge OLDNAME


Renaming Directories
-------- -----------

You can rename directories with

	cvsmv OLDDIRNAME NEWDIRNAME

This makes the new directory and the necessary subdirec-
tories and then uses cvsmv to move all the files from
the old to the new directory.  The old directory is left
empty except for Attic files, and is NOT removed in the
repository, though it is removed locally.  If it were
removed in the repository it would cause problems for
already checked out copies of the project, even if there
are not Attic files.


Previous Revisions of a File
-------- --------- -- - ----

You can get a list of all the previous revisions of a
file by

	cvslog FILE

or for all files in a directory and its subdirectories
by

	cd DIRECTORY
	cvslog

This also tells which tags refer to which revisions for
each file.

You can get an old revision of a file into the current
directory with

	cvsold -rX.Y FILE

The old revision will be given the name FILE.rX.Y.  This
also works with -rTAG in place of -rX.Y.

The non-WOT equivalents of the WOT commands are:

	cvslog			cvs log 2>&1
	
	cvsold rX.Y FILE	cvs update -rX.Y -p \
	                            FILE > FILE.rX.Y
				chmod a-w FILE.rX.Y


Changing Repositories
-------- ------------

The repository of a CVS directory has a name of the form

	AAA@HHH:/DDD

(where if the repository is in the current account, the
`AAA@HHH:' may be missing).

You can find out the repository of the current directory
by

	cvsrepository

You can change the repository of the current directory
and all its subdirectories, recursively, with

	cvsrepository PATTERN REPLACEMENT

where PATTERN and REPLACEMENT are as per the sed(1)
substitution (s) command.  This can be useful when a
repository is moved, and you are uncertain whether there
are local files that have been modified and need to be
checked in.

The non-WOT equivalents of the WOT commands are:

	cvsrepository		cat CVS/Root

	cvsrepository PATTERN REPLACEMENT

	    Edit all CVS/Root files in the current
	    directory and its descendant subdirectories.


Repository Structure
---------- ---------

The CVS repository has the following structure:

    /DDD/CVSROOT	CVS control file directory
    /DDD/PPP		Project PPP Directory
    /DDD/PPP/SSS	Project PPP Subdirectory SSS
    /DDD/PPP/SSS/FILE,v PPP/SSS/FILE repository; FILE
    			  NOT in Attic
    /DDD/PPP/SSS/Attic/FILE,v  PPP/SSS/FILE repository,
    			       for FILL in Attic

Local (checked out) project structure:

    PPP			Project directory
    PPP/SSS		Project subdirectory
    PPP/SSS/FILE	Project file
    PPP/SSS/CVS		CVS control file directory

The directory organization of the repository mirrors
that of the local copy of the project.  There are
additional directories to hold CVS control files: in the
repository this is just the /DDD/CVSROOT directory, and
in the local copies of each directory, there is a CVS
subdirectory.  In the repository files moved to the
Attic are put in the Attic subdirectory of the file's
normal repository directory.

The FILE,v files in the repository have exactly the same
structure as the RCS repository files, an in fact an RCS
,v file can be moved into a CVS repository directory to
put the file under CVS control.  The main consideration
in doing this is to be sure the RCS ,v file is unlocked
before it is moved.

The ,v files can be moved around or copied in the
repository, which is what cvsmv and cvscp do.  You can
create a project subdirectory by simply creating it in
the repository.  All these changes can be propagated to
a local project copy by cvsup (cvs update -d -P).

You cannot simply move a ,v file between a repository
subdirectory to its Attic subdirectory.  The ,v files
in an Attic directory differ from those not in an Attic
directory in that the RCS state of their most recent
revision is `dead' and not `Exp'.

Note on Group Repositories
---- -- ----- ------------

If a repository is shared among several accounts, the
repository directories can be assigned to a group GGG.
The directories should have the chmod g+s bit set to
all subdirectories created will also be in this group.
Lastly, the accounts should all have the CVSUMASK
environment variable set as follows:

    In the .bashrc:

	CVSUMASK=007; export CVSUMASK

    In .cshrc (or .tcshrc)

	setenv CVSUMASK 007

This ensures that when cvs is run directories created
by cvs will be writable by their group.

File:		cvs.help
Author:		Bob Walton (walton@seas.harvard.edu)
Date:		See date at top of file.

The authors have placed this file in the public domain;
they make no warranty and accept no liability for this
file.

RCS Info (may not be true date or author):

    $Author: walton $
    $Date: 2009/04/01 19:15:17 $
    $RCSfile: cvs.help,v $
    $Revision: 1.23 $
