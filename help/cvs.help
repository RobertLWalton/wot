CVS HELP

File:		cvs.help
Author:		Bob Walton (walton@deas.harvard.edu)
Date:		Tue Mar 24 07:58:32 EDT 2009

Purpose: CVS implements a system for storing past and
present versions of a file "foo" in another file
"foo,v" that is located in a CVS repository.  In storing
many versions of "foo" in "foo,v", CVS stores mostly
just the differences between versions, thus saving much
storage space compared to a normal file system.  The CVS
repository can be accessed from any account that can
read and write the files and directories of the
repository, or from any remote system that can log into
such an account using rlogin or ssh.  CVS is standardly
installed in modern UNIX systems, and it is possible to
install CVS under other operating systems.  The web site
for CVS is http://cvs.nongnu.org/, and this has free
downloads for common operating systems.

CVS is very useful for a single person who works on
several different computers that do not have a shared
file system, or who works on a computer whose file
system is not regularly backed up.  By placing a CVS
repository on a backed up computer, it is easy to work
on a project on many different non-backed up computers;
just checkout the project whenever you start a work
session and check it back in when you finish the
session.

CVS is useful for cooperative projects where many people
work on the same set of files.  It permits more than one
person to work on the same file in parallel, and merges
the results, though some human intervention is required
for checking and cleanup of the merge.

CVS uses RCS to maintain the ",v" files.  Like RCS, CVS
is also useful for backing up files in case you acci-
dentally delete them, and for seeing what changes you
recently made.  If the repository is remote from you,
accessing it using CVS can be slower, however, than a
local RCS system.  It is easy to move ",v" RCS files
into a CVS repository and to move them out again, so it
is easy to switch between using CVS and using RCS.  And
it is also possible to place your CVS repository on your
local computer and back it up on a remote machine as a
tar file.  This can also be useful if you want to store
only an encrypted version of your files on the remote
computer.

The CVS repository is a directory with subdirectories.
Repository directories contain ",v" files or and sub-
directories.  Users maintain copies of parts of the
repository with ",v" files replaced by the files they
log (i.e., "foo,v" replaced by "foo").  Users may check
files in and out, and may check all the files and sub-
directories in a subdirectory system in or out.  Check-
ing "foo" in means storing the current version of "foo"
in "foo,v"; checking "foo" out means copying the most
recent version of "foo" stored in "foo,v" to the user's
version of "foo".  The command in CVS to check files in
is called `commit', and the command to check files out
is called `update'.

The subdirectory organization of the repository is the
same as the subdirectory organization of the user of
the repository: the differences are that where there
is a file named "foo,v" in the repository, there is
a file named "foo" in the associated user subdirectory,
and that the user subdirectory has a CVS subdirectory
used for bookkeeping.  The root of the repository has
a CVSROOT subdirectory for bookkeeping, and the
repository subdirectories may have Attic subdirectories
in which ",v" files that have been `removed' from the
repository are kept (so nothing is ever lost).

You can checkout any directory in the repository, or
subtree of directories rooted at any directory of the
repository.  You do not need to checkout the whole
repository, but you can do so (just checkout `.').
Commonly you have one subdirectory of the repository
for each of your projects, and you checkout projects
independently.  When you initially start working on a
project on a particular computer, you use the CVS
`checkout' command to make a copy of the project
directory and its subdirectories on the local machine.

The repository name is the full pathname of the
repository directory if the repository is on the local
computer; or is of the form:

	login-name@host-name:full-directory-pathname

if the repository is on a remote computer.  Because :
is legal in a windows operating system file name, on
the windows operating system a local pathname is of
the form:

	local:full-directory-pathname

CVS repositories are created by running the CVS `init'
command.


Environment Settings
----------- --------

You should put

	setenv CVSREAD

in your .cshrc file on the computers you work on.  This
causes files checked out from the repository to be
marked read-only.  To change a file you must first

	chmod u+w filename

and then edit or change the file.  If you do not proceed
in this fashion, you will find it easy to accidentally
change a file and check it in, because the commit
command typically checks in ALL the changed files in a
directory tree.

If you have the secure shell ssh available to access the
account named in a remote repository, then you should
put:

	setenv CVS_RSH ssh

in your .cshrc file on the computers you work on.  If
you do NOT do this, rsh will be used to access the
remote repository.  CVS works with a remote repository
by logging into the remote account every time it runs,
so to avoid having to type a password for every CVS
command you run, you should set up ssh (or rsh) so that
you can log into the remote account without typing a
password (see ssh.help).

If you are doing a group project in which all users are
in a UNIX group, it is important that your umask be set
to 7, and not 77, when CVS is accessing the repository.
To accomplish this put:

	setenv CVSUMASK 007

in the .cshrc file of the account where the repository
resides.  If you do NOT do this, but instead let CVS
access the repository with umask equal to 77, the repo-
sitory files created when you run CVS will be inacces-
sible to your group mates.

Note that using the above setenv implies that ALL CVS
repositories you manage with a particular account will
have group write permissions.  If some of these
repositories are not to be group accessible, you may
protect the repository top level directory against group
access, and, if you like, periodically remove group
permissions from the files and subdirectories in the
repository.

WOT Short CVS User Commands:
--- ----- --- ---- --------

WOT (Walton's Own Tools) has a few simple commands that
are all you normally need to access a repository.  These
are:

    cvs -d repository-name directory
    cvs -d repository-name -n directory
    cvs -d repository-name -e directory
        Check out a directory (and its subdirectories)
	from the repository.  The directory is created
	locally as per `mkdir', and must not previously
	exist.  With -n, the directory is not in the
	repository, but is created there.

	With -e, the directory already exists locally,
	and has files from the repository added to it.
	But the directory that already exists locally
	must NOT have been created by cvsout.  Once
	created by cvsout, use cvsup below, and not
	cvsout, to move updates from the repository to
	the local directory.

    mine file ...
        Make files writable by owner.  The cvsup and
	cvscom commands below leave files read-only,
	so you need to make files you want to change
	writable.

    cvscom [file-or-directories ...]
        Commit current directory or listed files and
	directories to repository.  Commits subdirec-
	tories of any commited directory, recursively.

    cvsup [file-or-directories ...]
        Update current directory or listed files and
	directories from repository.

    cvsutd [file-or-directories ...]
        Get status of current directory contents, or
	listed files and contents of listed directories.
	Just like cvsup, but changes no files or direc-
	tories.

    cvsdiff [-rHEAD] [file-or-directories ...]
        Diff current directory contents, or listed
	files and contents of listed directories, with
	last version checked out from repository, or
	with most recent version (HEAD) checked into
	repository.

All WOT tools are documented in detail by giving the
-doc to the tool: e.g., type `cvscom -doc' to get the
documentation of cvscom.

The following standard cvs commands are used with the
above to get started:

    cvs -d repository-name init

	Create repository.

    cvs add file-or-directory ...

        Add directories or files on the local computer
	to those that should be stored in the reposi-
	tory.  Actually storing the files will be done
	by the next `cvscom' command.

The following other commands are often useful.

    cvs remove file

        Remove a file.  You must first delete the file
	from the local computer.  Actual removal will
	be delayed until the next `cvscom' command, and
	will actually move the file's repository ,v
	file to an Attic directory in the repository,
	so it is not really lost.

	DO NOT REMOVE A DIRECTORY.

    cvs log file ...

        Get a list of versions of a file or files.

    cvs diff file-or-directory ...
    cvs diff -rX.Y file
    cvs diff -rHEAD file-or-directory

        Diff the current local version of a file with
	the version you last checked out, or with ver-
	sion X.Y (obtained from `cvs log file'), or with
	the most recent version (HEAD) in the repository
	(this might have been checked in by someone else
	or by you working on a different computer).  If
	directories are named, all the files in them and
	their subdirectories are diff'ed.

Some things cannot be done well by cvs commands, and
need to be done instead by modifying files in the
repository itself.  You need to log into the account
holding the repository to do these things.  After you
change the repository, you need to run cvsup to move
the changes to your local version.

    Renaming files.
        To simply rename a file, mv its ,v file in the
	repository.  E.g., `mv fee/fi,v fo/fum,v'.

	But if you want to leave some record behind of
	the file with the old name, say because it was
	used in a previous release of the system that
	you might want to check out later, then instead
	`cp fee/fi,v fo/fum,v' and use `cvs remove fi'
	in your local version `fee' directory to create
	a new file `fo/fum' with the same history as
	`fee/fi', and then move `fee/fi' to the Attic.

    Renaming directories.
        Create a new directory in the repository, and
	move all files from the old directory to the
	new directory, proceeding as per `renaming
	files' above.  DO NOT DELETE the old directory.

    Deleting a directory.
        First, empty the directory, removing all files
	and subdirectories, except the Attic directory.
	After doing this, but WITHOUT DELETING the
	directory itself from the repository, the cvsup
	command will remove any local versions of the
	directory.

	When ALL local versions EVERYWHERE have been
	removed by cvsup, it is safe to remove the
	directory from the repository.  If any local
	version is left, it will cause troubles when
	it is not found in the repository.  Just
	deleting the local copy of the directory will
	not fix these troubles: you must also delete
	any reference to the directory in the
	CVS/Entries file of its parent directory.

    Moving files from RCS to CVS or vice versa.
        The ,v files in CVS are identical to those of
	RCS.  Just move them.

	However, the ,v files in an Attic directory
	have the state `dead' instead of the state
	`Exp'.  To make then usable by RCS, you should
	change the state to `Exp' by

		rcs -sExp file,v ...

	Also, RCS files must not be locked when in the
	repository.  If locked RCS files are moved into
	the repository, they will cause errors.  The
	locks can be removed by

		rcs -u file,v ...

TBD

ignoring files.
	Several cvs commands print the names of files
	that are not in the repository, such as .dvi
	or .o files.  There are two ways to get cvs
	to ignore such files.  First, make a cvsignore
	file in the CVSROOT module of the repository
	that includes a filename pattern matching the
	names of the files to be ignored.  E.g.,
	cvsignore might have the line `*.dvi *.o'.
	Alternatively, a .cvsignore file in a
	a subdirectory will cause cvs to ignore all
	the files in that subdirectory whose names
	match the patterns in the .cvsignore file.

	When changing CVSROOT/cvsignore, after you have
	committed this file, you must go to the repo-
	sitory and in the repository check out the
	CVSROOT/cvsignore file using the RCS command
	co -u (or -l).  Committing CVSROOT/cvsignore
	with cvs only changes CVSROOT/cvsignore,v in the
	repository, and not CVSROOT/cvsignore in the
	repository.

Merging
	If two people edit the same version of a file
	independently, the first person to commit will
	not have any problem.  The second person to
	commit will have the commit fail.  The second
	person must then run `cvs update' to get a
	working version of the file which has the
	changes made by the first person merged into the
	second person's working file.  This merge is
	done by `rcsmerge'.  The file should be examined
	to see if there are any real conflicts between
	the changes done by the two people.  If the
	changes overlap, the file will contain both
	versions delimited by lines containing `<<<<<<<'
	and `>>>>>>>'.
    					


Standard CVS User Commands:
-------- --- ---- --------

Note: Commands without a filename run on all files
in the current directory and its subdirectories.
The same command with filenames runs only on the named
files in the current directory.

cvs -d repository checkout module-name

	Does a `mkdir module-name' and checks out all
	files and subdirectories of the named module
	(i.e., top level subdirectory).

	You may also use `.' as a module-name.  This
	checks out all subdirectories in the repository.

cvs status -v
cvs status -v | grep Status
cvs status -v filename ...
cvs status -v filename ... | grep Status

	Identifies all files in the repository that
	store the history of files in the current
	directory and its subdirectories, and for
	each such file gives the status of the user's
	version of the file.  A file Status is most
	commonly one of:

	    Up-to-date	User's version of file is the
			same as repository's version.

	    Locally	User has modified his version of
	    Modified    the file since he checked it
			out of the repository.

	    Needs	Repository version is more
	    Patch	recent than the user's version.
	    or Checkout

	    Needs	User has modified his version of
	    Merge	the files since he checked it
			out of the repository, and the
			repository now holds a version
			more recent than the version the
			user checked out.

	Unfortunately, files other users have added and
	the current user has never checked out are not
	mentioned.  You need to do a cvs -n update -d -P
	to see them.


cvs diff
cvs diff filename ...
cvs diff -rVVV filename
	Prints a diff listing between the last version
	of a file that the user checked out of the
	repository (NOTE: this may not be the latest
	version in the repository) and the user's
	version of the file, if the user has modified
	the file.  With -rVVV, release VVV (e.g., 1.4)
	of the file in the repository is used for making
	the diff listing.


cvs update -d -P
cvs update filename ..
	Checks out files that have been updated in the
	repository since the user last checked out the
	files.  The command without filenames and
	with the -d and -P options also removes files
	removed from the repository, adds files added
	to the repository, and removes local copies of
	directories that are empty in the repository.

cvs -n update -d -P
	Ditto but just tells you what cvs update -d -P
	would do, and does not actually do it.  Files
	are listed with status as follows:

		? File not added to cvs.

		U File updated in repository but not
		  in working directory.

		A File cvs added in working directory
		  but not yet commited to repository.

		R File cvs removed in working directory
		  but not yet commited to repository.

		M File modified in working directory
		  and not yet committed to repository.

		  If file is also modified in repository
		  relative to when it was last checked
		  out to working directory, then the
		  two independent sets of modifications
		  do NOT conflict.

		C Ditto but the file is modified both
		  in the working directory and the
		  repository and the modifications DO
		  conflict.

cvs commit -m update
cvs commit -m update filename
	Checks in files that the user has updated since
	the user last checked out the files.  Also
	removes files or directories removed from the
	repository that were identified by the CVS
	`remove' command below, and adds files or
	directories to the repository that were
	identified by the CVS `add' command below.
	The `-m update' parameter just satisfies
	the need of `cvs commit' for a message from
	its user telling the purpose of the commit.

cvs add filename ...
cvs add directory ...
cvs remove filename ...
	Marks files that are to be added or removed from
	the repository.  The actual addition or removal
	is done by the next CVS `commit' command.

	A directory can also be added to the repository.
	However, a directory cannot be removed.  Note
	that empty directories may be removed by the
	`cvs update ... -P' command described below,
	so you should be sure any useful directory is
	not empty (in worst case by adding a .cvskeep
	file with meaningless contents).

	A directory cannot be removed from the
	repository in this way, or even easily.  See
	`moving and removing directories' below.

	To add just make the file or directory and
	mention it in an `add' command.

	To remove the file or directory, first delete it
	and then mention it in a cvs `remove' command.

	Removed stuff is not actually removed from the
	repository.  It is moved to an Attic
	subdirectory of the directory it was in.  The
	",v" files in an Attic have state `dead' for
	their last revision, and this prevents the
	use of these files by CVS even if they are
	moved out of the Attic subdirectorys.  The
	rcs command `rcs -sExp filename,v' will
	change the state to the normal `Exp' state
	and permit these ",v" files to be reused.

Infrequently used commands:
------------------------

cvs -d repository-full-pathname init
	This is used to create a repository.

cd repository-full-pathname; mkdir module; \
    chmod 770 module
	Make a new module.

cvs log
cvs log filename ...
	Print the status of all revisions of files.

cvs tag symbolic_tag
cvs tag symbolic_tag filename ...
	Attach a symbolic_tag (any character string,
	quoted if it contains a space) to the
	current versions of files.  This can be
	used to mark all the file versions that make
	a system version.

cvs -d repository-name checkout -r symbolic_tag module
	This checks out the module but produces only
	those files which have versions with the given
	symbolic_tag, producing just the versions of
	these files with that tag.

CVS/Entries CVS/Root CVS/Repository
	Each working directory has a CVS subdirectory
	containing these files.  The Entries file lists
	the files and subdirectories in the working
	directory that are under cvs control, and gives
	information about their status.  The Root file
	is just the name of the repository, taken from
	the -d option of the checkout command.  The
	Repository file names the repository directory
	that matches the working directory.

Changing repository location.
       You can move the repository, or make copies, with
       mv or `cp -R'.  You can repoint an existing
       working directory to a moved or copied repository
       by editing all the CVS/Root files in the working
       directory and its subdirectories, and if
       necessary also editing all the CVS/Repository
       files in these directories.
